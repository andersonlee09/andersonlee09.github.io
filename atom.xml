<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anderson&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-17T08:31:14.637Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Anderson Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络攻击行为鉴赏</title>
    <link href="http://example.com/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/"/>
    <id>http://example.com/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/</id>
    <published>2022-02-17T05:43:06.000Z</published>
    <updated>2022-02-17T08:31:14.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络攻击行为鉴赏"><a href="#网络攻击行为鉴赏" class="headerlink" title="网络攻击行为鉴赏"></a>网络攻击行为鉴赏</h1><p>我大概在半年前就在B站上看到了一个有关于网络安全的科普视频，当时还没有学习计算机网络，看的一知半解。当我学习的过程中又看了一遍，非常有趣。这个视频我已经看了不下五遍，但每一次观看都有新的收获，所以打算写一篇文章来记录一下。</p><p>视频<a href="https://www.bilibili.com/video/BV1KQ4y117nq">链接</a>在这里，希望大家一健三连！</p><h2 id="DoS"><a href="#DoS" class="headerlink" title="DoS"></a>DoS</h2><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217140001471.png" class><p>在最开始我先来介绍Dos(Denial of Service)攻击，即拒绝服务。就是占用网络资源让服务器应接不暇，从而拒绝正常业务流量的一种攻击方式。</p><h2 id="DDoS"><a href="#DDoS" class="headerlink" title="DDoS"></a>DDoS</h2><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217140230372.png" class><p>DDoS(Distributed denial of service), 分布式拒绝服务。即”群殴”。成千上万设备同时向服务器发送请求。</p><p>在详细讲解各类网络攻击方法之前我们先来看一看网络是如何运行的。</p><h2 id="网络原理"><a href="#网络原理" class="headerlink" title="网络原理"></a>网络原理</h2><h3 id="访问过程"><a href="#访问过程" class="headerlink" title="访问过程"></a>访问过程</h3><p>一次网络访问过程简化如下：</p><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217140559093.png" class><p>客户端通过网络线路向服务器发送请求，服务器查询或计算后向服务器返回结果。这类数据流转的行为和传统邮递十分相似。</p><h3 id="网络系统"><a href="#网络系统" class="headerlink" title="网络系统"></a>网络系统</h3><p>邮递依靠邮政系统，互联网则依靠TCP&#x2F;IP协议通信系统。</p><p>可简化为以下四层结构</p><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217141028712.png" class><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>在我们写信时常会遵循一些合适，如开始要写对方称呼、以及最后的署名和日期等。HTTP协议则做到了这一点，关于HTTP更多具体内容可查看<a href="https://andersonlee09.github.io/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82%E8%AF%A6%E8%A7%A3/">这里</a>。</p><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217141151773.png" class><p>在写完内容后我们可以给信加一个加急等标记，对方会根据标记决定如何回复，要不要加急或者确认对方身份等。传输层则完成了这个功能，规定了数据传输方式，比如这一层我们常见的TCP协议，为保证通信可靠性要先进性三次握手才会进行数据传输，过程可查看<a href="https://andersonlee09.github.io/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82%E8%AF%A6%E8%A7%A3/#%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B">这里</a>,我们的网络攻击方式很多也是根据TCP协议来进行。</p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217142223881.png" class><p>装新建的信封则类似于网络层，规定了通信双方地址的编码规则，这一层采用IP协议，所以我们常会听到“设备IP地址”。</p><h4 id="子网层"><a href="#子网层" class="headerlink" title="子网层"></a>子网层</h4><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217142406073.png" class><p>一封信的投递主要依靠的是邮局，邮局收到信之后根据地址将信件送到目的地，这就对应子网层，将数字信号转化为物理信号，比如卫星、以太网等。</p><p>数据根据不同协议进行不同打包，到达目的地之后又进行分层拆包最终被目标接收。</p><p>下面根据这些协议来欣赏不同的攻击技术。</p><h2 id="ICMP洪水"><a href="#ICMP洪水" class="headerlink" title="ICMP洪水"></a>ICMP洪水</h2><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217142900737.png" class><p>向一台服务器不断发送IP协议数据包，就可以消耗对方网络带宽，从而达到攻击的目的。</p><p>例如我们常见的ping命令就可以发送ICMP协议包，这种攻击方式交ICMP洪水。这种攻击类似于我们不断给某个人投递信件，写什么不重要，重要的是让信件多的邮递员在对方门口排起长队，从而打断正常的信件收发，同样思路，我们可以发送传输层UDP协议包，发起UDP洪水，但这样会暴露攻击者IP地址，而被对方禁封。所以攻击者可以伪造一个虚假或者不存在的IP从而隐藏自己。</p><h2 id="反射攻击"><a href="#反射攻击" class="headerlink" title="反射攻击"></a>反射攻击</h2><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217143923150.png" class><p>既然可以伪造IP，那我们就将发件地址改为要攻击的目标的地址，收件地址为互联网第三方机器，这样回复的信件就会指向攻击目标，第三方机器成为“反射器”。</p><p>这就类似于把别人电话号码放在往上，然后机主被不明真相的推销员呼死。这样就很难查到幕后黑手。</p><h2 id="放大攻击"><a href="#放大攻击" class="headerlink" title="放大攻击"></a>放大攻击</h2><p>这更像是反射攻击的进化版。</p><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217144258721.png" class><p>比如我们常见的DNS服务器，这是一种解析IP地址的服务器，比如我们向浏览器输入<a href="http://www.bilibili.com/">www.bilibili.com</a> , 浏览器会先向DNS服务器发送请求，将B站的IP发送给客户端，然后客户端会根据IP来访问B站服务器。在这里DNS服务器返回的数据远远大于请求数据，一般60个字节请求数据可返回3000字节返回数据，带宽放大因子(BAF)为50,即可产生50倍的放大效果。</p><p>这样攻击者就可以向DNS服务器发起请求，同时将自己IP伪造为被攻击者IP，这样就可以产生50倍的放大效果，可谓四两拨二十斤。</p><h2 id="TCP洪水"><a href="#TCP洪水" class="headerlink" title="TCP洪水"></a>TCP洪水</h2><p>除了占用被攻击者带宽，我们还有很多方式可以达到目的。比如攻击服务器连接资源</p><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217145113861.png" class><p>我们知道TCP三次握手后会与客户端建立连接，此时服务器会有一个连接表来记录正在连接的连接，而连接表大小有限，我们可以让攻击设备发起大量TCP连接，占满TCP连接表，让其不能完成后面的连接请求从而达到DDoS效果。但因为三次握手的存在，该攻击方式不能伪造IP。</p><h2 id="SYN洪水"><a href="#SYN洪水" class="headerlink" title="SYN洪水"></a>SYN洪水</h2><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217145721104.png" class><p>看过三次握手的都知道，握手第一步是客户端向服务器发送SYN&#x3D;1的数据包，根据此，我们可以向服务器只发送SYN而不进行回答，由于TCP的重传机制，服务器会多次重传SYN+ACK直到超时，大约十次。此时请注意，攻击者要尽量伪造自己的IP，否则就会达到“杀敌一千，自损一万”的效果。如果IP不存在，受害者会拔剑四顾心茫然，如果存在，那就把祸水东引到了某个倒霉蛋身上。</p><h2 id="RST洪水攻击"><a href="#RST洪水攻击" class="headerlink" title="RST洪水攻击"></a>RST洪水攻击</h2><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217150426577.png" class><p>在TCP存在<a href="https://andersonlee09.github.io/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82%E8%AF%A6%E8%A7%A3/#%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B">四次挥手</a>的过程结束连接，但为了防止出现异常，一方可以发送RST数据强制切断连接，这样我们就可以让攻击者尝试伪造各种IP地址，并发送RST数据进行“盲打”，一旦IP和某些配置和正常用户达成匹配，那就会切断正常用户和服务器之间的连接。</p><h2 id="HTTP洪水攻击"><a href="#HTTP洪水攻击" class="headerlink" title="HTTP洪水攻击"></a>HTTP洪水攻击</h2><p>每一次访问都是客户端通过网络线路向服务器发送请求，服务器查询或计算后向服务器返回结果。</p><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217151106457.png" class><p>比如我们可以利用站点的搜索功能，不断生成大量关键词送入查询地址，服务器收到请求后会在数据库进行查询这样的IO操作，这样的攻击手法会对目标产生更大的消耗。</p><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217151331507.png" class><p>但是该方法有个问题，那就是不能伪造IP，因为HTTP基于TCP协议，存在三次握手的过程，所以我们可以借助网络代理方式发起攻击</p><h2 id="应对方法"><a href="#应对方法" class="headerlink" title="应对方法"></a>应对方法</h2><p>看完上述攻击方法我们可以看出来，攻击方法大都需要伪造自己的IP地址</p><h3 id="网络设备过滤"><a href="#网络设备过滤" class="headerlink" title="网络设备过滤"></a>网络设备过滤</h3><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217155551573.png" class><p>解决伪造IP的方法并不复杂，用户设备通过路由器接入服务商，那就可以让路由设备检测IP，把原地址IP不属于本路由所在网段的数据都过滤掉</p><h3 id="分布式过滤"><a href="#分布式过滤" class="headerlink" title="分布式过滤"></a>分布式过滤</h3><p>一个设备IP可以造假，但是它经过的真实路径可不能造假。所以如果路由能根据其IP路径检测出矛盾，那就过滤这样的流量，该方法涉及网络设备提供商，服务商和监管部门等，所以很难被达成</p><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217155859088.png" class><h3 id="CDN技术"><a href="#CDN技术" class="headerlink" title="CDN技术"></a>CDN技术</h3><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217160244662.png" class><p>把一些静态资源作为缓存分发给各个CDN节点，用户请求的时候从最近的节点返回，就能缓解DDoS.</p><h3 id="流量清洗"><a href="#流量清洗" class="headerlink" title="流量清洗"></a>流量清洗</h3><p>我们在服务器前架设一套流量清洗设备，比如SYN洪水攻击，客户端发送SYN数据包，由清洗设备发送SYN+ACK回复</p><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217160648350.png" class><p>如果应答，那对方就是正常流量，清洗设备就把本次连接交给服务器正常通信。</p><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217160708021.png" class><p>如果不应答那就断开连接。</p><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217160744466.png" class><p>达到以上效果</p><p>又比如在面对HTTP洪水的时候，通过IP很难检测，那就把请求交给流量清洗平台，该平台会有一个IP信用库，对于一些臭名昭著的IP会直接过滤。</p><img src="/2022/02/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E8%A1%8C%E4%B8%BA%E9%89%B4%E8%B5%8F/image-20220217160858625.png" class><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>DDoS作为一种历史悠久的攻击技术，今日还不能被彻底解决，所以希望大家保持警惕，做好防护！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络攻击行为鉴赏&quot;&gt;&lt;a href=&quot;#网络攻击行为鉴赏&quot; class=&quot;headerlink&quot; title=&quot;网络攻击行为鉴赏&quot;&gt;&lt;/a&gt;网络攻击行为鉴赏&lt;/h1&gt;&lt;p&gt;我大概在半年前就在B站上看到了一个有关于网络安全的科普视频，当时还没有学习计算机网络，看的一</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="HTTP" scheme="http://example.com/tags/HTTP/"/>
    
    <category term="TCP" scheme="http://example.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>应用层详解</title>
    <link href="http://example.com/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-02-16T15:38:28.000Z</published>
    <updated>2022-02-17T05:42:18.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用层详解"><a href="#应用层详解" class="headerlink" title="应用层详解"></a>应用层详解</h1><p>应用层主要协议为HTTP、HTTPS、FTP等协议，本文主要讲解HTTP协议内容</p><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><img src="/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82%E8%AF%A6%E8%A7%A3/image-20220216160216081.png" class><h3 id="301和302区别"><a href="#301和302区别" class="headerlink" title="301和302区别"></a>301和302区别</h3><ul><li>共同点</li></ul><p>301和302都是重定向，即浏览器拿到这个返回值会重新进入一个URL，这个地址可以从响应location中获取。</p><ul><li>不同点</li></ul><p>301表示永久性重定向（该资源已经不可访问），搜索引擎在抓取新内容同时也将旧网址交换为重定向后网址。</p><p>302表示临时重定向(该资源仍然可以访问)，该重定向是临时从A转向B，搜索引擎会抓取新内容而保存旧的网址</p><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><p>GET\POST\PUT\DELETE\HEAD</p><h2 id="GET和POST区别"><a href="#GET和POST区别" class="headerlink" title="GET和POST区别"></a>GET和POST区别</h2><ul><li>GET使用URL 或COOKIE，而POST将数据放于body，所以post较为安全</li><li>GET参数有长度限制</li><li>本质区别：GET是幂等的，POST不是</li></ul><p>幂等是指一次和多次请求某一资源应该具有同样的副作用，即同一URL多个请求应有同一结果</p><h2 id="HTTP长连接和短连接"><a href="#HTTP长连接和短连接" class="headerlink" title="HTTP长连接和短连接"></a>HTTP长连接和短连接</h2><p>在HTTP&#x2F;1.0中，默认使用的是短连接。也就是说，浏览器和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接。如果客户端浏览器访问的某个HTML或其他类型的 Web页中包含有其他的Web资源，如JavaScript文件、图像文件、CSS文件等；当浏览器每遇到这样一个Web资源，就会建立一个HTTP会话。</p><p>但从 HTTP&#x2F;1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头有加入这行代码：</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs c">Connection:keep-alive<br></code></pre></td></tr></table></figure><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的 TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接要客户端和服务端都支持长连接。</p><p>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</p><h2 id="HTTP求请求报文格式"><a href="#HTTP求请求报文格式" class="headerlink" title="HTTP求请求报文格式"></a>HTTP求请求报文格式</h2><ol><li>请求行</li></ol><p>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。</p><p>比如 GET &#x2F;data&#x2F;info.html HTTP&#x2F;1.1</p><ol start="2"><li>请求头</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Accept</span>： 浏览器可接受的MIME类型。<br><span class="hljs-attribute">Accept</span>-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少<span class="hljs-number">5</span>到<span class="hljs-number">10</span>倍的下载时间。<br><span class="hljs-attribute">Accept</span>-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。<br><span class="hljs-attribute">Host</span>： 客户机通过这个头告诉服务器，想访问的主机名。HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>请求必须包含主机头域，否则系统会以<span class="hljs-number">400</span>状态码返回。<br><span class="hljs-attribute">User</span>-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。<br><span class="hljs-attribute">Cookie</span>：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。<br><span class="hljs-attribute">Connection</span>：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP <span class="hljs-number">1</span>.<span class="hljs-number">1</span>(HTTP <span class="hljs-number">1</span>.<span class="hljs-number">1</span>默认进行持久连接)，它就可以利用持久连接的优点，<br></code></pre></td></tr></table></figure><ol start="3"><li>请求体</li></ol><p>username&#x3D;xx&amp;pwd&#x3D;xx</p><h2 id="Cookie-amp-Session"><a href="#Cookie-amp-Session" class="headerlink" title="Cookie&amp;Session"></a>Cookie&amp;Session</h2><p><strong>1存储位置不同</strong></p><p>cookie的数据信息存放造客户端浏览器上</p><p>session的数据信息存放在服务器上</p><p><strong>2存储容量不同</strong></p><p>单个cookie保存的数据&lt;&#x3D;4kb,一个站点最多保存20个cookie</p><p>对于session来说并没有上限,但是出于对服务端的性能的考虑,session内不要存放过多的东西,</p><p>并且设置session删除机制</p><p><strong>3存储方式不同</strong></p><p>cookie中只能保管ASCII字符串,并需要通过编码方式存储为Unicode字符串或者二进制数据</p><p>session中能够存储任何类型的数据 包括但不限于string,integer,list,map等</p><p><strong>4隐私策略不同</strong></p><p>cookie对客户端是可见的,别有用心的人可以分析存放在本地的cookie并进行cookie欺骗,所以它是不安全的</p><p>session存储在服务器上,对客户端是透明的,不存在敏感信息泄露的风险</p><p><strong>5有效期上不同</strong></p><p>开发者可以通过设置cookie的属性,达到使cookie长期有效的效果</p><p>session依赖于名为JSESSIONID的cookie,而cookie JSESSIONID的过期时间默认为-1,只需要关闭窗口该session就会失效,因而session不能达到长期有戏的效果</p><p><strong>6服务器压力不同</strong></p><p>cookie保管在客户端,不占用服务器的资源,对于并发用户十分多的网站,cookie是很好的选择</p><p>session是保管在服务端的,每个用户都会产生一个session,假如并发访问的用户十分多,会产生十分多的session,耗费大量的内存</p><p><strong>7浏览器支持不同</strong></p><p>假如客户端浏览器不支持cookie</p><p>cookie是需要客户端浏览器支持的,假如客户端禁用了cookie,或者不支持cookie,则会话跟踪会失效,关于wap上的应用,常规的cookie就派不上用场了</p><p>运用session需要使用url地址重写的方式,一切用到session程序的url都要进行url地址重写,</p><p>否则session会话跟踪还会失效</p><p>假如客户端浏览器支持cookie</p><p>cookie既能够设为本浏览器窗口以及子窗口内有效,也能够设为一切窗口内有效</p><p>session只能在本窗口以及子窗口内有效</p><p><strong>8跨域支持上不同</strong></p><p>cookie支持跨域名访问</p><p>session不支持跨域名访问</p><h2 id="HTTP-amp-HTTPS"><a href="#HTTP-amp-HTTPS" class="headerlink" title="HTTP&amp;HTTPS"></a>HTTP&amp;HTTPS</h2><img src="/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82%E8%AF%A6%E8%A7%A3/image-20220217133459104.png" class>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;应用层详解&quot;&gt;&lt;a href=&quot;#应用层详解&quot; class=&quot;headerlink&quot; title=&quot;应用层详解&quot;&gt;&lt;/a&gt;应用层详解&lt;/h1&gt;&lt;p&gt;应用层主要协议为HTTP、HTTPS、FTP等协议，本文主要讲解HTTP协议内容&lt;/p&gt;
&lt;h2 id=&quot;HTTP状</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="HTTP" scheme="http://example.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>运输层详解</title>
    <link href="http://example.com/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-02-16T07:45:27.000Z</published>
    <updated>2022-02-16T07:54:31.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运输层详解"><a href="#运输层详解" class="headerlink" title="运输层详解"></a>运输层详解</h1><p>经历过面试的小伙伴应该明白：计算机网络是面试的重点，而TCP和UDP所在的运输层则是重中之重，下面我将讲解运输层功能，大概包括以下几点：运输层功能、TCP与UDP区别、流量控制、拥塞避免、三次握手、四次挥手</p><h2 id="运输层功能"><a href="#运输层功能" class="headerlink" title="运输层功能"></a>运输层功能</h2><p>直接为应用进程间逻辑通信提供服务</p><h2 id="应用层功能"><a href="#应用层功能" class="headerlink" title="应用层功能"></a>应用层功能</h2><p>为应用程序提供交互服务</p><h2 id="TCP标志位功能"><a href="#TCP标志位功能" class="headerlink" title="TCP标志位功能"></a>TCP标志位功能</h2><img src="/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82%E8%AF%A6%E8%A7%A3/image-20211112214123356.png" class><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><h3 id="握手过程"><a href="#握手过程" class="headerlink" title="握手过程"></a>握手过程</h3><p>三次握手过程如下：</p><img src="/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82%E8%AF%A6%E8%A7%A3/image-20211112215032515.png" class><p>一、客户端向服务器发送一个请求SYN&#x3D;1 同时发送自己序列号seq&#x3D;X ,</p><p>二、服务器回复一个确认报文 ACK&#x3D;1， 确认号为ACKnum &#x3D; X+1 为期望收到对方下一个报文段的数据第一个字节的序号，同时发送SYN&#x3D;1 表示这是一个连接接受的报文， 同时附带自己的序列号seq&#x3D;1.</p><p>三、客户端发送确认报文ACK&#x3D;1 ACKnum&#x3D;Y+1</p><h3 id="为什么是三次而不是两次"><a href="#为什么是三次而不是两次" class="headerlink" title="为什么是三次而不是两次"></a>为什么是三次而不是两次</h3><p>假如现在是两次握手就可以建立连接，客户端向服务器发送请求，然后服务器向客户端回复请求，连接立刻建立。</p><ul><li>防止已经失效的请求再次被建立连接</li></ul><p>假设当客户端向服务器发送连接1后，该连接因为路由中转的原因迟迟不能到达，客户端又向客户端发送了第二次连接请求2，且会话快速结束。此时请求连接1才姗姗来迟并再次与服务器发送连接，但是现在客户端已经关闭，服务端便会不停发送从而浪费资源</p><ul><li>不能确认双方接收和发送能力都良好</li></ul><p>第一次握手：客户端什么也不知道，服务器知道自己可以接收，对方可以发送</p><p>第二次握手：客户端知道自己可以发送和接收，对方可以接收和发送、服务端什么也不知道</p><p>第三次握手：服务器知道自己发送，对方可以接收</p><p>由此可见少了第三步，服务器不知道完整信息</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><h3 id="挥手过程"><a href="#挥手过程" class="headerlink" title="挥手过程"></a>挥手过程</h3><img src="/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82%E8%AF%A6%E8%A7%A3/image-20220216150617179.png" class><p>第一次握手：</p><ol><li>客户端连接释放报文，并且停止发送数据。其中FIN&#x3D;1，顺序号为seq&#x3D;m，此时，客户端Client进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li></ol><p>第二次握手：</p><ol start="2"><li><p>服务器Server收到连接释放报文，发出确认报文，ACK&#x3D;1，ack&#x3D;m+1，并且带上自己的顺序号seq&#x3D;n，此时，服务器Server就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端Client向服务器的方向就释放了，这时候处于半关闭状态，即客户端Client已经没有数据要发送了，但是服务器Server若发送数据，客户端Client依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</p></li><li><p>客户端Client收到服务器Server的确认信息后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器Server发送连接释放报文（在这之前还需要接受服务器Server发送的最后的数据）。</p></li></ol><p>第三次握手：</p><ol start="4"><li>服务器Server将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN&#x3D;1，ack&#x3D;m+1，由于在半关闭状态，服务器Server很可能又发送了一些数据，假定此时的顺序号为seq&#x3D;p，此时，服务器Server就进入了LAST-ACK（最后确认）状态，等待客户端Client的确认。</li></ol><p>第四次握手：</p><ol start="5"><li>客户端Client收到服务器Server的连接释放报文后，必须发出确认，ACK&#x3D;1，ack&#x3D;p+1，而自己的顺序号是seq&#x3D;m+1，此时，客户端Client就进入了TIME-WAIT（时间等待）状态。<strong>注意此时TCP连接还没有释放，必须经过2*MSL（最长报文段寿命）的时间后，当客户端Client撤销相应的TCB（保护程序）后，才进入CLOSED状态。</strong></li><li>服务器Server只要收到了客户端Client发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器Server结束TCP连接的时间要比客户端Client早一些。</li></ol><h3 id="为什么TIME-WAIT状态需要经过2MSL-最大报文段生存时间-才能返回到CLOSE状态？"><a href="#为什么TIME-WAIT状态需要经过2MSL-最大报文段生存时间-才能返回到CLOSE状态？" class="headerlink" title="为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？"></a>为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</h3><p>按照前面所说，当四个报文全部发送完毕后，理论上就算是结束了。但是实际情况往往不会那么可靠，比如最后一条报文发出后丢失了，那么服务器端就不会接收到这一报文，每隔一段时间，服务器端会再次发出FIN报文，此时如果客户端已经断开了，那么就无法响应服务器的二次请求，这样服务器会继续发出FIN报文，从而变成了死循环。所以需要设置一个时间段，如果在这个时间段内接收到了服务器端的再次请求，则代表客户端发出的ACK报文没有接收成功。反之，则代表服务器端成功接收响应报文，客户端进入CLOSED状态，此次连接成功关闭。而这个时间，就规定为了2MSL，即客户端发出ACK报文到服务器端的最大时间 + 服务器没有接收到ACK报文再次发出FIN的最大时间 &#x3D; 2MSL</p><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><p>发送方维持一个拥塞窗口cwnd，取决于其网络拥塞程度，动态变化</p><img src="/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82%E8%AF%A6%E8%A7%A3/image-20220216152258882.png" class><ul><li>慢开始</li></ul><p>不用一开始速度就很快，由小到大逐渐增大，且为指数增长1：1-&gt;2-&gt;4-&gt;8…</p><ul><li>拥塞避免</li></ul><p>当cwnd&lt;ssthresh(慢开始门限)，拥塞窗口缓慢增长，每次一个往返就+1, 16-&gt;17-&gt;18… </p><ul><li>快重传</li></ul><img src="/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82%E8%AF%A6%E8%A7%A3/image-20220216153625395.png" class><p>剔除一些不必要的拥塞报文，在收到一个失序的报文段后就<strong>重复</strong>确认，而不是等到自己发送数据时捎带确认。</p><p>发送放只要连续收到三个确认，就应该立刻重传对方未收到的报文段，这样就不必设置重传计时器时间到期</p><ul><li>快恢复</li></ul><p>当快重传发生时，代表发送窗口过大，此时要把ssthresh(慢开始门限)减半，但并不进行慢开始算法，因为已经收到连续三个回复确认表示网络还行~</p><h2 id="TCP和UDP区别"><a href="#TCP和UDP区别" class="headerlink" title="TCP和UDP区别"></a>TCP和UDP区别</h2><img src="/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82%E8%AF%A6%E8%A7%A3/image-20220216154131025.png" class>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;运输层详解&quot;&gt;&lt;a href=&quot;#运输层详解&quot; class=&quot;headerlink&quot; title=&quot;运输层详解&quot;&gt;&lt;/a&gt;运输层详解&lt;/h1&gt;&lt;p&gt;经历过面试的小伙伴应该明白：计算机网络是面试的重点，而TCP和UDP所在的运输层则是重中之重，下面我将讲解运输层功能</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="TCP" scheme="http://example.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>Python自动化解决Hexo图片引用路径问题</title>
    <link href="http://example.com/2022/02/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A7%A3%E5%86%B3Hexo%E5%9B%BE%E7%89%87%E5%BC%95%E7%94%A8%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/02/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A7%A3%E5%86%B3Hexo%E5%9B%BE%E7%89%87%E5%BC%95%E7%94%A8%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-02-14T04:40:34.000Z</published>
    <updated>2022-02-14T05:33:10.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python自动化解决Hexo图片引用路径问题"><a href="#Python自动化解决Hexo图片引用路径问题" class="headerlink" title="Python自动化解决Hexo图片引用路径问题"></a>Python自动化解决Hexo图片引用路径问题</h1><h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>看过我第二篇Blog的小伙伴应该知道，在typora的图片引用和hexo存在一定差别，具体为：</p><img src="/2022/02/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A7%A3%E5%86%B3Hexo%E5%9B%BE%E7%89%87%E5%BC%95%E7%94%A8%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20220214124532420.png" class><p>可以看到存在一定差距，我昨天一直将原路径里的图片放至blog项目下同名目录中，然后修改markdown文件里图片名称，虽然操作难度不大，但有时候一篇文章可能存在几十张图片，这样子任务繁多，且容易出错，我们是否可以利用<strong>python自动化</strong>完成这些事情呢？答案是可以的！</p><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><p>我大体思路如下：</p><ol><li><p>首先逐行读取md文件，如果发现该行存在根目录：C：User\xxxxxxxxxxxxxx,则该行为图片所在行</p></li><li><p>将图片名称存下来，将该行变换为可识别引用重新写入副本里，将图片从老文件里存入新文件夹（使用PIL库）</p></li><li><p>最后将老md文件放入final_url文件夹中方便以后本地查看，副本文件修改名称即可。</p></li></ol><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">r 以只读方式打开文件。文件的指针会放在文件的开头。</span><br><span class="hljs-string"></span><br><span class="hljs-string">w 以写入方式打开文件。文件存在覆盖文件，文件不存在创建一个新文件。</span><br><span class="hljs-string"></span><br><span class="hljs-string">a 以追加方式打开文件。如果文件已存在，文件指针放在文件末尾。如果文件不存在，创建新文件并可写入。</span><br><span class="hljs-string"></span><br><span class="hljs-string">r+ 打开一个文件用于读写。文件指针会放在文件的开头</span><br><span class="hljs-string"></span><br><span class="hljs-string">w+ 打开一个文件用于读写。文件存在覆盖文件，文件不存在创建一个新文件。</span><br><span class="hljs-string"></span><br><span class="hljs-string">a+ 打开一个文件用于读写。如果文件已存在，文件指针放在文件末尾。如果文件不存在，创建新文件并可写入。</span><br><span class="hljs-string"></span><br><span class="hljs-string">记忆方法：记住r读，w写，a追加，每个模式后加入+号就变成可读写</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># typora 自动存储图片所在目录</span><br>old_url = <span class="hljs-string">&#x27;C:\\Users\李瑞航\AppData\Roaming\Typora\\typora-user-images\\&#x27;</span><br><span class="hljs-comment"># blog markdown所在目录</span><br>new_url = <span class="hljs-string">&#x27;D:\\Users\\blog\source\_posts\\&#x27;</span><br><span class="hljs-comment"># 最后想存储原markdown目录</span><br>final_url = <span class="hljs-string">&#x27;D:\\Users\\blog\\markdown\\&#x27;</span><br><span class="hljs-comment"># 文件名称</span><br>filename = <span class="hljs-string">&#x27;linux&#x27;</span><br><br><br><span class="hljs-comment"># 处理文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_file</span>(<span class="hljs-params">title</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    process .md or .txt format file</span><br><span class="hljs-string">    :param file: .md or .txt format file</span><br><span class="hljs-string">    :return: null</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 如果还没有这个文件夹就创建这个文件夹</span><br>    <span class="hljs-keyword">if</span> title + <span class="hljs-string">&#x27;.md&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.listdir(new_url):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;未找到该markdown文件！&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> title <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> os.listdir(new_url):<br>        os.mkdir(new_url + title)<br>    <span class="hljs-comment"># 创建一个副本记录最新处理好的图片路径</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;new_url&#125;</span><span class="hljs-subst">&#123;title&#125;</span>_.md&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;new_url&#125;</span><span class="hljs-subst">&#123;title&#125;</span>.md&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>):<br>            <span class="hljs-keyword">if</span> old_url <span class="hljs-keyword">in</span> line:<br>                pic_name = line.split(old_url)[-<span class="hljs-number">1</span>][:-<span class="hljs-number">2</span>]<br>                process_pic(pic_name, title)<br>                f.write(<span class="hljs-string">&#x27;&#123;% asset_img &#x27;</span> + pic_name + <span class="hljs-string">&#x27; %&#125;\n&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                f.write(line)<br>    <span class="hljs-comment"># 移动老的md</span><br>    shutil.move(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;new_url&#125;</span><span class="hljs-subst">&#123;title&#125;</span>.md&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;final_url&#125;</span><span class="hljs-subst">&#123;title&#125;</span>.md&#x27;</span>)<br>    <span class="hljs-comment"># 将新的md命名为老的md</span><br>    os.rename(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;new_url&#125;</span><span class="hljs-subst">&#123;title&#125;</span>_.md&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;new_url&#125;</span><span class="hljs-subst">&#123;title&#125;</span>.md&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_pic</span>(<span class="hljs-params">pic_name, title</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        remove picture</span><br><span class="hljs-string">        :param pic_name: ome picture name</span><br><span class="hljs-string">        :return: null</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    I = Image.<span class="hljs-built_in">open</span>(old_url + pic_name)<br>    I.save(new_url + title + <span class="hljs-string">&#x27;/&#x27;</span> + pic_name)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 接收来自cmd的参数</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;尝试处理 <span class="hljs-subst">&#123;sys.argv[<span class="hljs-number">1</span>]&#125;</span>&#x27;</span>)<br>        process_file(sys.argv[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">except</span> IndexError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;未找到该标题所在目录，已经自适应标题~&#x27;</span>)<br>        <span class="hljs-keyword">if</span> filename == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;文件名为空！&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            process_file(filename)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;运行结束&#x27;</span>)<br><br><br></code></pre></td></tr></table></figure><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><p>本脚本所用python第三方库均为内置库，无需下载。</p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>old_url: 即为typora存储图片的路径</p><p>new_url: 即为hexo项目markdown文件所在路径</p><p>final_url: 最后想存储原markdown目录</p><p>title: 想要处理的markdown名称（选填，不填则为空）</p><h3 id="运行方法"><a href="#运行方法" class="headerlink" title="运行方法"></a>运行方法</h3><ul><li>脚本运行（推荐）</li></ul><p>因为项目使用了sys库，所以可以在命令行直接启动，具体为：</p><p>python xx.py filename.md</p><p>xx为该python 文件名称，filename为markdown文件名称, 不用加引号</p><ul><li>直接运行</li></ul><p>直接修改文件里filename即可</p><h2 id="结果欣赏"><a href="#结果欣赏" class="headerlink" title="结果欣赏"></a>结果欣赏</h2><p>处理前：</p><img src="/2022/02/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A7%A3%E5%86%B3Hexo%E5%9B%BE%E7%89%87%E5%BC%95%E7%94%A8%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20220214115422400.png" class><p>处理中：</p><img src="/2022/02/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A7%A3%E5%86%B3Hexo%E5%9B%BE%E7%89%87%E5%BC%95%E7%94%A8%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20220214122757715.png" class><p>处理后：</p><img src="/2022/02/14/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A7%A3%E5%86%B3Hexo%E5%9B%BE%E7%89%87%E5%BC%95%E7%94%A8%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20220214122837301.png" class><p>成功！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python自动化解决Hexo图片引用路径问题&quot;&gt;&lt;a href=&quot;#Python自动化解决Hexo图片引用路径问题&quot; class=&quot;headerlink&quot; title=&quot;Python自动化解决Hexo图片引用路径问题&quot;&gt;&lt;/a&gt;Python自动化解决Hexo图片</summary>
      
    
    
    
    <category term="自动化办公" scheme="http://example.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="自动化办公" scheme="http://example.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础用法</title>
    <link href="http://example.com/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</id>
    <published>2022-02-14T03:52:52.000Z</published>
    <updated>2022-02-14T04:36:51.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20210719144052490.png" class><h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><h4 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h4><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20210719144844491.png" class><h4 id="管理组内成员"><a href="#管理组内成员" class="headerlink" title="管理组内成员"></a>管理组内成员</h4><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20210719145010114.png" class><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20210719145324771.png" class><h3 id="日期管理"><a href="#日期管理" class="headerlink" title="日期管理"></a>日期管理</h3><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20210719145405647.png" class><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105131210111.png" class><p>chgrp andersonlee tmp</p><p>给tmp文件修改用户组为andersonlee</p><p>chown 文件所有者和用户组两个一起设置</p><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>提高当前用户权限来执行后面的语句</p><p>ps&amp;top查看进程信息</p><p>kill id 杀死进程</p><p>杀不死则使用  kill -9 id</p><p>shutdown -h now立刻关机</p><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><p>chmod 777 filename</p><p>chmod修改权限</p><p>user -&gt; u 属主权限</p><p>group -&gt; g 属组权限</p><p>others -&gt; o 其他权限</p><p>all -&gt;a  全部权限</p><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105133300795.png" class><p>R即为该目录下所有文件</p><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105133350825.png" class><p><strong>stat</strong> 查看文件属性</p><p>pwd 查看文件路径</p><h3 id="编辑文本"><a href="#编辑文本" class="headerlink" title="编辑文本"></a>编辑文本</h3><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><p>i -&gt; insert  当前字符插入</p><p>l -&gt; insert  首行插入</p><p>a -&gt; append   当前字符后添加</p><p>A -&gt; append  行末尾添加</p><p>o -&gt;  当前行后插一空行</p><p>O -&gt;  当前行前插入空行</p><p>写完ESC</p><p>:q  vim进入文件没有对文件做任何操作 可以按q</p><p>:q!  有操作但不想退出保存</p><p>:wq  正常退出保存</p><p>:wq!  强制保存退出</p><p>:set nu显示行</p><p>cat +文件名 查看文件内容</p><p>cat -n +文件名 查看文件内容 加行号</p><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105163119757.png" class><p>less  查看大文件 q退出</p><p>grep 查找内容</p><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105165025046.png" class><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105165121746.png" class><p>-n  显示行数</p><p>-i  不区分大小写</p><p>-v  不含有的</p><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105165451279.png" class><p>查看名字里有sshd的进程</p><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105165820814.png" class><p>定位到具体行数</p><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>ps</p><p>ps -ef 查看所有进程</p><h3 id="软连接（快捷方式）"><a href="#软连接（快捷方式）" class="headerlink" title="软连接（快捷方式）"></a>软连接（快捷方式）</h3><p>ln -s 原路径  新路径</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>find</p><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105180928459.png" class><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>gzip *   压缩</p><p>gunzip  filename   解压文件</p><p>zip</p><p>-q : 不显示执行过程   -r : 递归处理 对该目录下的子目录一起处理</p><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105182234465.png" class><p>unzip -l filename.zip 查看压缩文件内容</p><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105182338320.png" class><p>unzip -d ccc aaa.zip  解压</p><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><p>ifconfig  查看网络</p><p>ping <a href="http://www.baidu.com/">www.baidu.com</a>  向网址发送包</p><p>ping -c 2 <a href="http://www.baidu.com/">www.baidu.com</a>  只发生两次包</p><p>netstat  显示网络状态  -a 显示所有连线中的socket    -i显示网卡列表</p><h3 id="yum下载软件"><a href="#yum下载软件" class="headerlink" title="yum下载软件"></a>yum下载软件</h3><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105183711457.png" class><p>-y表示遇到选择就选yes</p><p>删除</p><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105183819413.png" class><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>注释：</p><p>:&lt;&lt;!</p><p>​    注释内容</p><p>！</p><p>单引号和双引号的区别</p><img src="/2022/02/14/linux/Linux%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/image-20211105204011402.png" class><p>命令定义</p><p>变量名&#x3D;‘命令’</p><p>变量名&#x3D;$(命令)</p><p><strong>使用变量正规写法</strong></p><p>“${变量名}”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h1&gt;&lt;h2 id=&quot;用户管理&quot;&gt;&lt;a href=&quot;#用户管理&quot; class=&quot;headerlink&quot; title=&quot;用户管理&quot;</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客引用图片无法显示</title>
    <link href="http://example.com/2022/02/13/hexo/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/"/>
    <id>http://example.com/2022/02/13/hexo/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/</id>
    <published>2022-02-13T10:30:00.000Z</published>
    <updated>2022-02-13T12:42:08.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客引用图片无法显示"><a href="#Hexo博客引用图片无法显示" class="headerlink" title="Hexo博客引用图片无法显示"></a>Hexo博客引用图片无法显示</h1><p>今天开始编写博客的时候，发现用Typora编写的文章引用图片编译后总是不能正常显示</p><p>于是开始各种百度，出来的都是下载一个路径转换<code>hexo-asset-image</code>的插件</p><p><code>hexo-asset-image</code>使用说明：</p><p><code>npm install hexo-asset-image --save</code></p><img src="/2022/02/13/hexo/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/image-20220213174631295.png" class title="This is an example image"><p>可一顿操作过后，还是不能够正常显示；</p><img src="/2022/02/13/hexo/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/image-20220213174756400.png" class title="This is an example image"><p>然后得到了一份index.js脚本的脚本，替换掉博客目录下node_modules&#x2F;hexo-ass-image&#x2F;index.js，并使用标签插件方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><br><span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPosition</span>(<span class="hljs-params">str, m, i</span>) &#123;<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">split</span>(m, i).<span class="hljs-title function_">join</span>(m).<span class="hljs-property">length</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> version = <span class="hljs-title class_">String</span>(hexo.<span class="hljs-property">version</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>  <span class="hljs-keyword">var</span> config = hexo.<span class="hljs-property">config</span>;<br>  <span class="hljs-keyword">if</span>(config.<span class="hljs-property">post_asset_folder</span>)&#123;<br>    <span class="hljs-keyword">var</span> link = data.<span class="hljs-property">permalink</span>;<br><span class="hljs-keyword">if</span>(version.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title class_">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)<br>   <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>   <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">4</span>) + <span class="hljs-number">1</span>;     <span class="hljs-comment">//markdown的本地路径是xxx/x.jpg    hexo g编译后加上这句就是public/2020/05/26/xxx/xx.jpg 前4个文件+后一个图片~</span><br><span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="hljs-keyword">var</span> endPos = link.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br>    link = link.<span class="hljs-title function_">substring</span>(beginPos, endPos);<br><br>    <span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.<span class="hljs-property">length</span>; i++)&#123;<br>      <span class="hljs-keyword">var</span> key = toprocess[i];<br> <br>      <span class="hljs-keyword">var</span> $ = cheerio.<span class="hljs-title function_">load</span>(data[key], &#123;<br>        <span class="hljs-attr">ignoreWhitespace</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">xmlMode</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">lowerCaseTags</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">false</span><br>      &#125;);<br><br>      $(<span class="hljs-string">&#x27;img&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;<br><span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br><span class="hljs-keyword">var</span> src = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.<span class="hljs-title function_">test</span>(src) &amp;&amp;<br>   !<span class="hljs-regexp">/^\s*\//</span>.<span class="hljs-title function_">test</span>(src)) &#123;<br>  <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br>  <span class="hljs-comment">// In addition, to support multi-level local directory.</span><br>  <span class="hljs-keyword">var</span> linkArray = link.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">var</span> srcArray = src.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">if</span>(srcArray.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>)<br>srcArray.<span class="hljs-title function_">shift</span>();<br>  src = srcArray.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>, config.<span class="hljs-property">root</span> + link + src);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span>+config.<span class="hljs-property">root</span> + link + src);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>($(<span class="hljs-variable language_">this</span>));<br>&#125;<br>      &#125;);<br>      data[key] = $.<span class="hljs-title function_">html</span>();<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>然后就可以正常显示图片了<br>但是请<strong>注意</strong>：这里图片的引入和项目目录十分重要</p><img src="/2022/02/13/hexo/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/5fa161ad.png" class title="This is an example image"><p>如上图所示，markdown文件应与其同名文件夹在同一目录下，且引入图片时有特殊规范 <code>asset_img</code>为固定写法， 后面直接跟文件夹下图片名称，最后为图片描述。</p><p><strong>最后引入结果：</strong></p><img src="/2022/02/13/hexo/Hexo%E5%8D%9A%E5%AE%A2%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/c8eb51ec.png" class title="This is an example image"><p>如上图所示：引入成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo博客引用图片无法显示&quot;&gt;&lt;a href=&quot;#Hexo博客引用图片无法显示&quot; class=&quot;headerlink&quot; title=&quot;Hexo博客引用图片无法显示&quot;&gt;&lt;/a&gt;Hexo博客引用图片无法显示&lt;/h1&gt;&lt;p&gt;今天开始编写博客的时候，发现用Typora编</summary>
      
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 搭建个人博客</title>
    <link href="http://example.com/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-02-13T10:26:15.000Z</published>
    <updated>2022-02-13T10:29:03.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-搭建个人博客"><a href="#Hexo-搭建个人博客" class="headerlink" title="Hexo 搭建个人博客"></a>Hexo 搭建个人博客</h1><h2 id="0-说明"><a href="#0-说明" class="headerlink" title="0.说明"></a>0.说明</h2><p>本项目基于Windows10利用Hexo部署个人博客并且投放至GitHub</p><h2 id="1-下载node-js"><a href="#1-下载node-js" class="headerlink" title="1.下载node.js"></a>1.下载node.js</h2><p>顺带下载npm</p><p>直接在官网下载，本文不作说明</p><h2 id="2-查看环境"><a href="#2-查看环境" class="headerlink" title="2.查看环境"></a>2.查看环境</h2><p>node -v</p><p>npm -v</p><p>如果没有异常则下载成功</p><h2 id="3-切换镜像"><a href="#3-切换镜像" class="headerlink" title="3.切换镜像"></a>3.切换镜像</h2><p>npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212123235109.png" class title="This is an example image"><h2 id="4-下载hexo"><a href="#4-下载hexo" class="headerlink" title="4.下载hexo"></a>4.下载hexo</h2><p>cnpm install -g hexo-cli</p><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212123235109.png" class title="This is an example image"><p>hexo -v查看版本</p><h2 id="5-初始化博客"><a href="#5-初始化博客" class="headerlink" title="5.初始化博客"></a>5.初始化博客</h2><p>hexo init</p><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212123658729.png" class title="This is an example image"><p>初始化结果：</p><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212123731036.png" class title="This is an example image"><h2 id="6-启动博客"><a href="#6-启动博客" class="headerlink" title="6.启动博客"></a>6.启动博客</h2><p>hexo s</p><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212124240300.png" class title="This is an example image"><p>初始化结果</p><h2 id="7-写博客"><a href="#7-写博客" class="headerlink" title="7.写博客"></a>7.写博客</h2><p>hexo n “My first blog”</p><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212124523578.png" class title="This is an example image"><p>对该目录下markdown进行编辑</p><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212124815007.png" class title="This is an example image"><p>编辑结束后</p><p>hexo clean</p><p>hexo g</p><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212125017647.png" class title="This is an example image"><p>hexo s</p><p>结果：</p><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212125137499.png" class title="This is an example image"><h2 id="8-投放至GitHub"><a href="#8-投放至GitHub" class="headerlink" title="8.投放至GitHub"></a>8.投放至GitHub</h2><h3 id="8-1-创建GitHub项目"><a href="#8-1-创建GitHub项目" class="headerlink" title="8.1 创建GitHub项目"></a>8.1 创建GitHub项目</h3><p>命名必须符合规范：name.github.io</p><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212130118069.png" class title="This is an example image"><h3 id="8-2下载git帮助"><a href="#8-2下载git帮助" class="headerlink" title="8.2下载git帮助"></a>8.2下载git帮助</h3><p>npm install hexo-deployer-git –save</p><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212130405182.png" class title="This is an example image"><h3 id="8-3设置-config-yml"><a href="#8-3设置-config-yml" class="headerlink" title="8.3设置_config.yml"></a>8.3设置_config.yml</h3><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212130741480.png" class title="This is an example image"><h3 id="8-4-修改Deployment"><a href="#8-4-修改Deployment" class="headerlink" title="8.4 修改Deployment"></a>8.4 修改Deployment</h3><p>修改前：</p><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212131006177.png" class title="This is an example image"><p>修改后：</p><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212123235109.png" class title="This is an example image"><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212141732952.png" class title="This is an example image"><p>hexo g -d</p><h3 id="8-4成功部署"><a href="#8-4成功部署" class="headerlink" title="8.4成功部署"></a>8.4成功部署</h3><img src="/2022/02/13/hexo/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/image-20220212141749479.png" class title="This is an example image"><p><strong>至此所有部署已经完成</strong> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo-搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo-搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo 搭建个人博客&quot;&gt;&lt;/a&gt;Hexo 搭建个人博客&lt;/h1&gt;&lt;h2 id=&quot;0-说明&quot;&gt;&lt;a href=&quot;#0-说明&quot; class=&quot;</summary>
      
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
