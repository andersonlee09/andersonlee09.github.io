<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anderson&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-10T15:51:05.945Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Anderson Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CAS</title>
    <link href="http://example.com/2022/03/10/JUC/CAS/"/>
    <id>http://example.com/2022/03/10/JUC/CAS/</id>
    <published>2022-03-10T15:39:59.000Z</published>
    <updated>2022-03-10T15:51:05.945Z</updated>
    
    <content type="html"><![CDATA[<p>建议看这篇文章之前先去看一下上一篇文章（Java锁机制）</p><p>假设我们现在有多个线程想去访问操作同一资源，很多人第一反应一定是互斥锁，但互斥锁是悲观的</p><ul><li>悲观锁</li></ul><p>简单来说，操作系统认为如果不严格管理线程调用，那一定会出现问题，那它就会把一个资源进行锁定，只让一个线程去调度。从而阻塞别的线程。</p><ul><li>乐观锁</li></ul><p>假设现在我们大部分操作都是读操作，那就没必要去每次操作就去锁定资源，那我们可不可以不锁定资源也能去同步线程呢？</p><p>这就要用到CAS（compare and swap）</p><img src="/2022/03/10/JUC/CAS/image-20220310232112615.png" class><p>假如现在资源状态值为0，多个线程同时访问到资源为0，记为OldValue，此时A,B,C同时想去修改这个状态值，假设A运气比较好，A它优先修改了资源状态为1，这时候B和C，在修改之前会拿资源状态值和刚才的OldValue进行比较，这时候B和C会发现不对劲，即资源状态值和刚才的OldValue不一样，那它们就会放弃修改，在实际操作中，我们一般不会让它直接放弃，而是让它去自旋</p><p><strong>CAS原子性</strong></p><p>我们都知道，CAS在更新前会进行判断，假如AB同时想去获取资源，在A像去把状态值改变的时候B抢先把值给修改了，这时候就会一个资源被两个资源占用，因此保证CAS原子性就十分重要。</p><p>现在CPU已经有了原子性的指令，直接调用即可。</p><h2 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h2><p>AtomicInteger就是CAS的一种实现，</p><img src="/2022/03/10/JUC/CAS/image-20220310233457294.png" class><p>通过源码可以看到它通过Unsafe的cas操作来进行值的更新。这里的U就是unsafe对象。</p><img src="/2022/03/10/JUC/CAS/image-20220310233620519.png" class><p>它的getAndIncrement()即数值自增方法就是用Unsafe对象的getAndAddInt来实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndAddInt</span><span class="hljs-params">(Object o, <span class="hljs-type">long</span> offset, <span class="hljs-type">int</span> delta)</span> &#123;<br>    <span class="hljs-type">int</span> v;<br>    <span class="hljs-keyword">do</span> &#123;<br>        v = getIntVolatile(o, offset);<br>    &#125; <span class="hljs-keyword">while</span> (!weakCompareAndSetInt(o, offset, v, v + delta));<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是getAndAddInt的源码，可以看到确实用到了CAS,这里的循环就是自旋<br>至此，我所了解的CAS内容全部讲解完毕~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;建议看这篇文章之前先去看一下上一篇文章（Java锁机制）&lt;/p&gt;
&lt;p&gt;假设我们现在有多个线程想去访问操作同一资源，很多人第一反应一定是互斥锁，但互斥锁是悲观的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;悲观锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单来说，操作系统认为如果不严格管理线程调用，那一</summary>
      
    
    
    
    <category term="JUC" scheme="http://example.com/categories/JUC/"/>
    
    
    <category term="JUC" scheme="http://example.com/tags/JUC/"/>
    
    <category term="CAS" scheme="http://example.com/tags/CAS/"/>
    
  </entry>
  
  <entry>
    <title>Java锁机制</title>
    <link href="http://example.com/2022/03/10/JUC/Java%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2022/03/10/JUC/Java%E9%94%81%E6%9C%BA%E5%88%B6/</id>
    <published>2022-03-10T14:10:08.000Z</published>
    <updated>2022-03-10T15:09:23.054Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/03/10/JUC/Java%E9%94%81%E6%9C%BA%E5%88%B6/image-20220310221706087.png" class><p>在Java中每个Object，也就是每一个对象都有一把锁。这把锁放在对象头，锁中记录了当前对象被哪一个线程锁占用。如上图中，红色的为对象Object，头为蓝色的，绿色的就是锁。</p><img src="/2022/03/10/JUC/Java%E9%94%81%E6%9C%BA%E5%88%B6/image-20220310222044664.png" class><p>如图，每个Java对象分为三块，分别为对象头、实例数据、填充字节</p><ul><li>对象头</li></ul><img src="/2022/03/10/JUC/Java%E9%94%81%E6%9C%BA%E5%88%B6/image-20220310222625579.png" class><p>对象头包含两部分：mark word和class point，class point指向对象在当前对象类型所在方法区中的类型数据。mark word存储了很多和当前对象运行时的状态信息。比如hashcode、锁状态标志，指向记录的指针等。</p><p>所标志位的不同bit值代表锁的不同状态</p><p>sychronized关键字被用来同步线程，sychronized被编译后会生成monitorenter和monitorexit两个字节码来进行线程同步</p><p>在这里介绍一下monitor，它常被翻译为管程\监视器，关于moniter我们可以把它想象成一个房间，只能容纳一名客人。而线程就是客人，一个线程进入monitor，那其他线程只能等待，只要当线程退出，其他线程才有进入的机会。</p><img src="/2022/03/10/JUC/Java%E9%94%81%E6%9C%BA%E5%88%B6/image-20220310223405307.png" class><p>看一下上面这张图，EntrySet聚集了一些像进入monitor的线程，正处于waiting状态，假如线程A成功进入monitor，那它就处于active状态，假如A线程执行过程中遇到了一个判断条件，那就让它暂时让出执行权，进入WaitSet，那它的状态就会变为waiting，假如另一个线程B进入monitor并且成功完成任务，那它就可以通过notify唤醒WaitSet中的线程。这样的线程调度十分耗费资源，所以Java6以后对sychronized进行了优化。</p><p>锁被分为了 无锁、偏向锁、轻量级锁、重量级锁。锁只能升级，不能降级</p><ul><li>无锁</li></ul><p>无锁就是对资源没有锁，所有线程都可以访问这个资源，这就可能出现两种情况：</p><ol><li>某个线程没有处在多线程情况下，或者线程间没有竞争，那就无需任何保护，让线程任意调度就可以</li><li>资源会被竞争，但是不进行资源锁定，可以通过CAS的方法来进行锁定，只有一个线程可以修改成功，其他修改失败的线程可以进行自旋，直到修改成功</li></ol><img src="/2022/03/10/JUC/Java%E9%94%81%E6%9C%BA%E5%88%B6/image-20220310224809193.png" class><ul><li>偏向锁</li></ul><img src="/2022/03/10/JUC/Java%E9%94%81%E6%9C%BA%E5%88%B6/image-20220310225134175.png" class><p>我们现在给对象加锁，不进行线程间切换，也不用进行资源，我们剋让一个锁只对应一个线程，只要是这个线程过来，就直接把锁交出去我们就认为这个对象偏爱这个锁，这就是偏向锁</p><p>这是如何实现的？</p><p>我们可以好好看看上面那个表，假如锁标志位是01，那就判断倒数第三个bit是否是1，如果是的话，那就说明它是偏向锁，否则就是无锁，如果是偏向锁，就去读取他的线程ID，如果线程ID和当前线程ID不同，那就说明存在锁竞争，那就会锁升级，升级为轻量级锁。</p><ul><li>轻量级锁</li></ul><p>假如线程访问锁时，如果发现那个锁标志位为00.那就说明这是一个轻量级锁</p><img src="/2022/03/10/JUC/Java%E9%94%81%E6%9C%BA%E5%88%B6/image-20220310225954559.png" class><p>这时候就会在虚拟机栈开辟一个LockRecord的空间，存储对象markword副本以及对象指针，线程会尝试用CAS获取锁，如果获取成功，那就复制对象mark word副本到LockRecord并且将owner指针指向该对象。如果此时其他线程也尝试获取锁，那它就会进行自旋，这里的自旋经过优化为<strong>适应性自旋</strong>，自旋时间不再固定，而是根据上次自旋的时间以及锁的状态来综合评估，一旦自旋线程超过一个，那就会升级为重量级锁</p><ul><li>重量级锁</li></ul><p>这个时候就回到开始读根据monitor来判断锁，这个代价十分昂贵。</p><p><strong>总结</strong></p><p>我们讲解了Java对象的划分，锁的标志位，以及优化后锁升级的步骤、不同状态下如何保证线程安全。</p><p>说了什么算适应性自旋</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2022/03/10/JUC/Java%E9%94%81%E6%9C%BA%E5%88%B6/image-20220310221706087.png&quot; class&gt;

&lt;p&gt;在Java中每个Object，也就是每一个对象都有一把锁。这把锁放在对象头，锁中记录</summary>
      
    
    
    
    <category term="JUC" scheme="http://example.com/categories/JUC/"/>
    
    
    <category term="JUC" scheme="http://example.com/tags/JUC/"/>
    
  </entry>
  
  <entry>
    <title>线程间通信方式</title>
    <link href="http://example.com/2022/03/10/JUC/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/03/10/JUC/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/</id>
    <published>2022-03-10T12:30:59.000Z</published>
    <updated>2022-03-10T13:25:58.887Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来讨论一个常见的面试题</p><p>线程间有哪些通信方式？</p><h1 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h1><p>这里讲的同步是指多个线程通过synchronized关键字这种方式来实现线程间的通信。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyObject</span> &#123;<br><br>    <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//do something....</span><br>    &#125;<br><br>    <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodB</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//do some other thing</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> MyObject object;<br><span class="hljs-comment">//省略构造方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.run();<br>        object.methodA();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> MyObject object;<br><span class="hljs-comment">//省略构造方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.run();<br>        object.methodB();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Run</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyObject</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyObject</span>();<br><br>        <span class="hljs-comment">//线程A与线程B 持有的是同一个对象:object</span><br>        <span class="hljs-type">ThreadA</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadA</span>(object);<br>        <span class="hljs-type">ThreadB</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadB</span>(object);<br>        a.start();<br>        b.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到我们对于两个方法methodA和methodB都进行了synchronized修饰，由于线程A和线程B持有同一个MyObject类的对象object，尽管这两个线程需要调用不同的方法，但是它们是同步执行的，比如：线程B需要等待线程A执行完了methodA()方法之后，它才能执行methodB()方法。这样，线程A和线程B就实现了通信。</p><h1 id="while轮询的方式"><a href="#while轮询的方式" class="headerlink" title="while轮询的方式"></a>while轮询的方式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyList</span> &#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        list.add(<span class="hljs-string">&quot;elements&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.size();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> mylist.MyList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> MyList list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadA</span><span class="hljs-params">(MyList list)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                list.add();<br>                System.out.println(<span class="hljs-string">&quot;添加了&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个元素&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> mylist.MyList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> MyList list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadB</span><span class="hljs-params">(MyList list)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">5</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;==5, 线程b准备退出了&quot;</span>);<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> mylist.MyList;<br><span class="hljs-keyword">import</span> extthread.ThreadA;<br><span class="hljs-keyword">import</span> extthread.ThreadB;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyList</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyList</span>();<br><br>        <span class="hljs-type">ThreadA</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadA</span>(service);<br>        a.setName(<span class="hljs-string">&quot;A&quot;</span>);<br>        a.start();<br><br>        <span class="hljs-type">ThreadB</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadB</span>(service);<br>        b.setName(<span class="hljs-string">&quot;B&quot;</span>);<br>        b.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MyList就是去new一个空的List然后提供两个方法，一个是返回它的size，一个是add方法添加元素；</p><p>ThreadA有一个MyList类生成的对象，它的run方法就是循环调用add方法，每次add后都sleep</p><p>ThreadB也有一个MyList类生成的对象，它会去判断list的size</p><p>在主函数里new一个List,同时传给线程A和线程B，然后让它们去开始执行</p><p>在这种方式下，线程A不断地改变条件，线程ThreadB不停地通过while语句检测这个条件(list.size()&#x3D;&#x3D;5)是否成立 ，从而实现了线程间的通信。但是这种方式会浪费CPU资源。</p><p>之所以说它浪费资源，是因为JVM调度器将CPU交给线程B执行时，它没做啥“有用”的工作，只是在不断地测试 某个条件是否成立。就类似于现实生活中，某个人一直看着手机屏幕是否有电话来了，而不是：在干别的事情，当有电话来时，响铃通知TA电话来了。</p><h1 id="wait-x2F-notify机制"><a href="#wait-x2F-notify机制" class="headerlink" title="wait&#x2F;notify机制"></a><strong>wait&#x2F;notify机制</strong></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyList</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        list.add(<span class="hljs-string">&quot;anyString&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> list.size();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Object lock;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadA</span><span class="hljs-params">(Object lock)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.lock = lock;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                <span class="hljs-keyword">if</span> (MyList.size() != <span class="hljs-number">5</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;wait begin &quot;</span><br>                            + System.currentTimeMillis());<br>                    lock.wait();<br>                    System.out.println(<span class="hljs-string">&quot;wait end  &quot;</span><br>                            + System.currentTimeMillis());<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Object lock;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadB</span><span class="hljs-params">(Object lock)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.lock = lock;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                    MyList.add();<br>                    <span class="hljs-keyword">if</span> (MyList.size() == <span class="hljs-number">5</span>) &#123;<br>                        lock.notify();<br>                        System.out.println(<span class="hljs-string">&quot;已经发出了通知&quot;</span>);<br>                    &#125;<br>                    System.out.println(<span class="hljs-string">&quot;添加了&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个元素!&quot;</span>);<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Run</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>            <span class="hljs-type">ThreadA</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadA</span>(lock);<br>            a.start();<br><br>            Thread.sleep(<span class="hljs-number">50</span>);<br><br>            <span class="hljs-type">ThreadB</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadB</span>(lock);<br>            b.start();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了解决上面B不断循环的情况，我们可以先去搞一个锁，线程A和B分别拿synchronized锁修饰，线程A要等待条件满足时(list.size()&#x3D;&#x3D;5)，才执行操作。线程B则向list中添加元素，改变list 的size。</p><p>A,B之间如何通信的呢？也就是说，线程A如何知道 list.size() 已经为5了呢？</p><p>这里用到了Object类的 wait() 和 notify() 方法。</p><p>当条件未满足时(list.size() !&#x3D;5)，线程A调用wait() 放弃CPU，并进入阻塞状态。—不像②while轮询那样占用CPU</p><p>当条件满足时，线程B调用 notify()通知 线程A，所谓通知线程A，就是唤醒线程A，并让它进入可运行状态。</p><p>这种方式的一个好处就是CPU的利用率提高了。</p><p>但是也有一些缺点：比如，线程B先执行，一下子添加了5个元素并调用了notify()发送了通知，而此时线程A还执行；当线程A执行并调用wait()时，那它永远就不可能被唤醒了。因为，线程B已经发了通知了，以后不再发通知了。这说明：<strong>通知过早，会打乱程序的执行逻辑。</strong></p><h1 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h1><p>就是使用java.io.PipedInputStream 和 java.io.PipedOutputStream进行通信</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天我们来讨论一个常见的面试题&lt;/p&gt;
&lt;p&gt;线程间有哪些通信方式？&lt;/p&gt;
&lt;h1 id=&quot;同步&quot;&gt;&lt;a href=&quot;#同步&quot; class=&quot;headerlink&quot; title=&quot;同步&quot;&gt;&lt;/a&gt;同步&lt;/h1&gt;&lt;p&gt;这里讲的同步是指多个线程通过synchronized关键</summary>
      
    
    
    
    <category term="JUC" scheme="http://example.com/categories/JUC/"/>
    
    
    <category term="JUC" scheme="http://example.com/tags/JUC/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode236二叉树的最近公共祖先</title>
    <link href="http://example.com/2022/03/10/Algo/LeetCode236%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>http://example.com/2022/03/10/Algo/LeetCode236%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</id>
    <published>2022-03-10T05:13:34.000Z</published>
    <updated>2022-03-10T06:53:38.639Z</updated>
    
    <content type="html"><![CDATA[<p>今天继续一道关于二叉树的题目，</p><img src="/2022/03/10/Algo/LeetCode236%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/image-20220310143712044.png" class><p>这道题要求两个节点的公共祖先，那肯定是自下而上的方法，而在二叉树的遍历操作中，有一种天然的自下而上遍历的方法，那就是回溯的方法。</p><p>我们假设要找的节点为P和Q</p><p>如果当前节点是空节点或者是要寻找的两个节点中的一个，那二话不说直接返回当前节点</p><p>我们可以去先对它的左节点做递归操作，然后对右节点做递归操作，左右节点的递归都会去返回一个节点。分别记为resLeft和resRight.</p><p>然后在对于该节点的操作上，如果刚才得到的resLeft为空，那刚才的P和Q都不在左侧，那就返回resRight</p><p>反之如果resRight.为空，同理与上</p><p>假如都不为空，那说明该节点就是那个最近的根节点，直接返回这个点就可以了！</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span> || root == p || root == q) <span class="hljs-keyword">return</span> root;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> lowestCommonAncestor(root.left, p, q);<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> lowestCommonAncestor(root.right, p, q);<br>        <span class="hljs-keyword">if</span> (left == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> right;<br>        <span class="hljs-keyword">if</span> (right == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> left;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，本题的思考过程全部结束。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天继续一道关于二叉树的题目，&lt;/p&gt;
&lt;img src=&quot;/2022/03/10/Algo/LeetCode236%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="二叉树" scheme="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode530二叉搜索树的最小绝对差</title>
    <link href="http://example.com/2022/03/09/Algo/LeetCode530%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE/"/>
    <id>http://example.com/2022/03/09/Algo/LeetCode530%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE/</id>
    <published>2022-03-09T15:06:21.000Z</published>
    <updated>2022-03-10T05:15:38.261Z</updated>
    
    <content type="html"><![CDATA[<p>我今天特别有针对性的就想去做一道二叉树遍历有关的题目，然后就遇到了<a href="https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/">530. 二叉搜索树的最小绝对差</a>这道题</p><p>这道题为easy，但我感觉它难度也不算小，这道题如果用一个数字，然后用中序遍历的方法存下有序的数组，最后贪心得出最终答案。</p><p>但我想说的并不是这种方法，而是用纯递归的方法去解决。这道题与常规题目不同的地方在于，它需要自己去创建两个个类属性：</p><ul><li>pre指针</li></ul><p>用于存储上次一遍历的值</p><ul><li>ans</li></ul><p>即最终答案，默认值为Integer.MAX_VALUE;</p><p>我们来分析一下，这道题肯定会用中序遍历的方法</p><img src="/2022/03/09/Algo/LeetCode530%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE/image-20220309231520756.png" class><p>假如有这样一个二叉树，中序遍历结果为：1-&gt;2-&gt;3-&gt;4-&gt;6,可以看到这是顺序的，而对于一个节点而言，它的<strong>顺序为小-&gt;中-&gt;大</strong></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>    <span class="hljs-keyword">private</span> TreeNode pre;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMinimumDifference</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        midfs(root);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">midfs</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        midfs(root.left);<br>        <span class="hljs-keyword">if</span> (pre != <span class="hljs-literal">null</span>) &#123;<br>            ans = Math.min(ans, root.val - pre.val);<br>        &#125;<br>        pre = root;<br>        midfs(root.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来看看这段代码，根据上面这个二叉树它首先回去访问1节点，此时pre节点为null，ans不会改变。这个时候把pre变为当前节点</p><p>第二次它会去访问2节点，此时pre为1，这个时候会进行一次最小值的替换，然后pre换为2，</p><p>接下来访问3节点。。。</p><p>相信大家都已经知道了，这样相较于直接把所有节点放在数组里十分类似，访问顺序都一样。</p><p>最后再提一句，这里的if (pre !&#x3D; null)为什么判断的是pre而不是root？</p><p>因为root上面已经判断过了，pre的判断只是为了防止第一次pre为空的情况</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我今天特别有针对性的就想去做一道二叉树遍历有关的题目，然后就遇到了&lt;a href=&quot;https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/&quot;&gt;530. 二叉搜索树的最小绝对差&lt;/a&gt;这道题&lt;/</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="二叉树" scheme="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode200岛屿数量</title>
    <link href="http://example.com/2022/03/09/Algo/LeetCode200%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/"/>
    <id>http://example.com/2022/03/09/Algo/LeetCode200%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</id>
    <published>2022-03-09T13:02:04.000Z</published>
    <updated>2022-03-10T05:15:38.276Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来分享这道题：<a href="https://leetcode-cn.com/problems/number-of-islands/">200. 岛屿数量</a>,这是有关图的递归遍历的题目。这道题我第一次见到的时候十分束手无策，这道题难度为mid，其实理解以后真实难度也就easy，主要是考了图的深度遍历。</p><p>首先先明确题意，它说的是<strong>上下左右</strong>为’0’的地方为水，然后求岛屿的数量，那我们就可以先搞一个二层遍历，遍历二维数组的每一个元素，如果它为’1’,那它一定是一个岛屿。然后我们下来要做的事情就是用递归的方法把周围相关的岛屿全部遍历一遍并且改一下状态(可以理解为只要遇见一个岛的一块地方，就把这个岛屿相关的地方全部变成水)。这里递归的结束条件就是当要访问的下标越界或者访问到’0’.</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numIslands</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] grid)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; grid.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; grid[<span class="hljs-number">0</span>].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                    dfs(grid, i, j);<br>                    count++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] grid, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || j &lt; <span class="hljs-number">0</span> || i &gt;= grid.length || j &gt;=grid[<span class="hljs-number">0</span>].length || grid[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">return</span>;<br>        grid[i][j] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>        dfs(grid, i + <span class="hljs-number">1</span>, j);<br>        dfs(grid, i, j + <span class="hljs-number">1</span>);<br>        dfs(grid, i - <span class="hljs-number">1</span>, j);<br>        dfs(grid, i, j - <span class="hljs-number">1</span>);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此本次要分享的思路全部结束</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天我们来分享这道题：&lt;a href=&quot;https://leetcode-cn.com/problems/number-of-islands/&quot;&gt;200. 岛屿数量&lt;/a&gt;,这是有关图的递归遍历的题目。这道题我第一次见到的时候十分束手无策，这道题难度为mid，其实理解以后真</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="图" scheme="http://example.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>ReentrantLock深度剖析</title>
    <link href="http://example.com/2022/03/08/JUC/ReentrantLock%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/"/>
    <id>http://example.com/2022/03/08/JUC/ReentrantLock%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/</id>
    <published>2022-03-08T14:02:37.000Z</published>
    <updated>2022-03-09T14:01:06.230Z</updated>
    
    <content type="html"><![CDATA[<p>在开始之前我们先来大概将一讲啥是ReentrantLock</p><p>ReentrantLock基于<strong>AQS</strong>，对于AQS不了解的可以看<a href="https://andersonlee09.github.io/2022/03/05/JUC/AQS%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/">这里</a>。在并发编程中它可以实现<strong>公平锁</strong>和<strong>非公平锁</strong>来对共享资源进行同步，同时，它与synchronizd一样，ReentrantLock支持<strong>可重入</strong>，除此之外，ReentrantLock在<strong>调度</strong>上更加灵活，支持更多丰富的功能。</p><img src="/2022/03/08/JUC/ReentrantLock%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/image-20220308221113973.png" class><p>接下来我们根据以上思维导图来进行讲解。</p><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><img src="/2022/03/08/JUC/ReentrantLock%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/image-20220308221251242.png" class><p>可以看到ReentrantLock实现了Lock接口，那什么 是Lock呢？</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs mipsasm">&#123;@code Lock&#125; implementations provide more <span class="hljs-keyword">extensive </span>locking operations than can <span class="hljs-keyword">be </span>obtained using &#123;@code <span class="hljs-keyword">synchronized&#125; </span>methods <span class="hljs-keyword">and </span>statements.  They allow more flexible structuring, may have quite <span class="hljs-keyword">different </span>properties, <span class="hljs-keyword">and </span>may support <span class="hljs-keyword">multiple </span>associated &#123;@link Condition &#125; objects.<br></code></pre></td></tr></table></figure><p>这是Lock接口最开头的一段内容，它的意思是说：</p><p>{@code Lock} 实现了区别于 {@code synchronized} 的另一种具有更多广泛操作的同步方式，它允许更灵活的结构，可能有完全不同的属性，并且可能支持多个关联的 {@link Condition} 对象。</p><img src="/2022/03/08/JUC/ReentrantLock%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/image-20220308222000247.png" class><p>Lock方法有六个方法</p><p>lock方法用于获取锁，加入当前锁被其他线程，那它就会去等待，直到获取锁</p><p>lockInterruptibly类似于lock，但区别在于假如当前线程在等待过程中被中断，那它就会退出等待，并且抛出异常</p><p>tryLock无参方法尝试获取锁，返回为bool类型代表是否获得锁</p><p>tryLock有参数方法，在一段时间内尝试获取锁，假如等待过程中被中断，就会抛出异常</p><p>unlock释放锁</p><p>newCondition方法新建一个绑定在当前Lock上的Condition对象，Condition对象有什么用？它表示一个等待状态，获得锁线程在某些时刻需要等待一些条件完成才能继续运行，那它通过await方法注册在condition对象上进行等待，通过condition对象的signal方法将其唤醒，这一点类似于Object的wait方法和notify方法。但不同的是一个Lock对象可以关联多个Condition。多个线程可以被绑定在不同的Condition对象实现分组功能。</p><h2 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h2><p>ReentrantLock只有一个属性：sync，它final修饰，一旦初始化，就不能被修改。</p><img src="/2022/03/08/JUC/ReentrantLock%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/image-20220308223528777.png" class><p>Sync继承AQS</p><img src="/2022/03/08/JUC/ReentrantLock%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/image-20220308223457935.png" class><p>Sync有两个子类，一个NonfairSync一个FairSync.</p><p>接下来我们看看Sync的nonfairTryAcquire方法，即不公平获取锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ReservedStackAccess</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">nonfairTryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br>        <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>        setState(nextc);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>它首先获取state,这里的state与AQS中state一样，用于表示当前线程状态</p><p>它先判断 当state为0，表示锁是空闲的，便可以进行一次CAS来原子地更改state，如果获取成功，那就setExclusiveOwnerThread将当前线程设置为独占线程，并且返回true</p><p>当state不为0，它会去判断当前线程是否是独占线程，为什么要进一步判断呢？这就是对<strong>可重入</strong>的实现，这里判断的是独占锁的人是不是自己，如果不是，那就尝试获取失败，返回flase。如果正是自己，那就能够满足可重入性，但是这个时候需要累加state来记录重入的次数,因为它需要释放相同次数。</p><p>这里它判断了一次state&lt;0，这是为了防止重入的次数过多造成整数溢出，所以它重入最大次数为2^31-1，这里不得不感叹一句，设计框架的人对于细节的把握真的很到位。</p><blockquote><p> 可重入指的是：单个线程执行时，重新进入同一个子程序仍然是线程安全的，A在某上下文获得了某锁，当A想再次获得锁的时候，不会因为锁已经被自己占用，而需要先去等待锁的释放。A如果已经获得了锁，又去等待自己释放锁，就会造成死锁。简单的来说就是一个线程可以不用释放，获得一个锁N次。但是它需要释放N次。</p></blockquote><p>接下来我们看看Sync的tryRelease方法，即尝试释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@ReservedStackAccess</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() - releases;<br>    <span class="hljs-keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        free = <span class="hljs-literal">true</span>;<br>        setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>    &#125;<br>    setState(c);<br>    <span class="hljs-keyword">return</span> free;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的返回值指的是释放完全释放，而不是是否成功释放一次。</p><h2 id="公平和非公平锁"><a href="#公平和非公平锁" class="headerlink" title="公平和非公平锁"></a>公平和非公平锁</h2><p>公平锁：按锁的请求顺序进行排队，拥有稳定获取锁的机会，但性能比较低。AQS的FIFO队列就可以实现。</p><p>非公平锁：不一定按照锁的请求顺序进行分配，但是性能高。因为后请求锁的线程可能在前面休眠线程恢复前就拿到锁，这样可以提高性能。线程间的切换可能会造成延时。</p><h2 id="NonfairSync"><a href="#NonfairSync" class="headerlink" title="NonfairSync"></a>NonfairSync</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7316153563782823691L</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">return</span> nonfairTryAcquire(acquires);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到它只是重写了tryAcquire方法，这里的nonfairTryAcquire我们在上面已经讲过，这里不进行赘述。</p><h2 id="FairSync"><a href="#FairSync" class="headerlink" title="FairSync"></a>FairSync</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3000897897090466540L</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Fair version of tryAcquire.  Don&#x27;t grant access unless</span><br><span class="hljs-comment">     * recursive call or no waiters or is first.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ReservedStackAccess</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;<br>                compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                setExclusiveOwnerThread(current);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br>            <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>            setState(nextc);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到它只是重写了tryAcquire方法，但重写方式略有不同，逻辑如下：</p><p>如果锁是空闲的，且FIFO队列中没有排在当前线程之前的线程，那就允许当前线程去尝试获取锁。如果是当前线程正在使用锁那就state进行累加，否则直接返回false</p><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>可以看到，该实现的已经实现的差不多了，ReentrantLock直接调用FairSync、NonfairSync就可以了。</p><img src="/2022/03/08/JUC/ReentrantLock%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/image-20220308231815738.png" class><p>ReentrantLock实现了两个构造函数，无参为非公平模式，</p><h2 id="Java中断机制"><a href="#Java中断机制" class="headerlink" title="Java中断机制"></a>Java中断机制</h2><img src="/2022/03/08/JUC/ReentrantLock%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/image-20220308232322877.png" class><p>假如现在有一条线程正在运行中，你对它调用interrupt方法，那它会继续运行，并不会抛出中断异常。而是修改thread对象的一个中断状态boolean值，true代表被中断，false表示未被中断。isinterrupted会返回这个状态值，isinterrupted会返回这个状态值，并将其改为false。</p><p>如果需要观察某个线程在Runnable状态下中断状态，可以用isinterrupted方法。又假如现在有一条线程，它的状态时blocked或waiting也就是阻塞或者等待，如果此时对它进行interrupt，如果线程是调用sleep\wait\join方法进入的阻塞或者等待，那就会抛出中断异常，假如是通过LockSupport.park方法进入阻塞状态被interrupt时，那它不会发生异常，而时改变线程状态的值。</p><p>写这篇文章我大概用了两个小时，实属不易，如果大家有什么异议还请提出~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在开始之前我们先来大概将一讲啥是ReentrantLock&lt;/p&gt;
&lt;p&gt;ReentrantLock基于&lt;strong&gt;AQS&lt;/strong&gt;，对于AQS不了解的可以看&lt;a href=&quot;https://andersonlee09.github.io/2022/03/05/</summary>
      
    
    
    
    <category term="JUC" scheme="http://example.com/categories/JUC/"/>
    
    
    <category term="JUC" scheme="http://example.com/tags/JUC/"/>
    
    <category term="ReentrantLock" scheme="http://example.com/tags/ReentrantLock/"/>
    
  </entry>
  
  <entry>
    <title>CopyOnWriteArrayList</title>
    <link href="http://example.com/2022/03/08/Java%E9%9B%86%E5%90%88/CopyOnWriteArrayList/"/>
    <id>http://example.com/2022/03/08/Java%E9%9B%86%E5%90%88/CopyOnWriteArrayList/</id>
    <published>2022-03-08T13:11:54.000Z</published>
    <updated>2022-03-08T13:56:31.257Z</updated>
    
    <content type="html"><![CDATA[<p>上次CVTE面试的时候，面试官问我ArrayList是线程安全的吗？</p><p>我回答：不是</p><p>他说假设我现在有一个场景需要用集合并且要线程安全，有什么方法</p><p>我会的：可以加synchronized锁，或者用CAS的方法</p><p>他问我有没有安全的容器</p><p>我想了想，确实我不知道，然后G了</p><p>后面我复盘了一下，发现安全的容器有vector和CopyOnWriteArrayList，vector我本来就知道，但是它几乎已经被弃用了，所以我没有说，今天我们来好好扒一扒这个CopyOnWriteArrayList</p><p>CopyOnWriteArrayList并发容器用于读多写少的并发场景。</p><ul><li>线程安全的ArrayList</li><li>写有锁，读无锁读写之间不阻塞，优于读写锁</li><li>写入时，先copy一个副本容器，再添加新元素，最后替换引用</li><li>使用方式与ArrayList无异</li></ul><p>下面我们先来分析一下add方法</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>        Object[] es = getArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> es.length;<br>        es = Arrays.copyOf(es, len + <span class="hljs-number">1</span>);<br>        es[len] = e;<br>        setArray(es);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>它先用synchronized把容器锁住，然后先把原来的容器给复制一份，复制到es，然后把es的最后一个元素添加e,最后把原数组引用指向es，这样就🆗了</p><p>下面看一下get方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">return</span> elementAt(getArray(), index);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到这个get方法非常朴素，没有任何锁，直接返回下标所在的值</p><p>所以相较于我们自己加的读写锁，它只有在写的时候加锁，这样效率会比较高一点</p><p>下面看一下remove方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>        Object[] es = getArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> es.length;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> elementAt(es, index);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> len - index - <span class="hljs-number">1</span>;<br>        Object[] newElements;<br>        <span class="hljs-keyword">if</span> (numMoved == <span class="hljs-number">0</span>)<br>            newElements = Arrays.copyOf(es, len - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span> &#123;<br>            newElements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[len - <span class="hljs-number">1</span>];<br>            System.arraycopy(es, <span class="hljs-number">0</span>, newElements, <span class="hljs-number">0</span>, index);<br>            System.arraycopy(es, index + <span class="hljs-number">1</span>, newElements, index,<br>                             numMoved);<br>        &#125;<br>        setArray(newElements);<br>        <span class="hljs-keyword">return</span> oldValue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到它的remove方法类似，它这里非常细节，如果numMoved &#x3D;&#x3D; 0即删除的元素为最后一个，那就直接复制一次就可以了，否则就从删除处分割一下，复制两次。</p><p><strong>总结</strong></p><p>CopyOnWriteArrayList写操作是在锁的保护下进行的，这样可以避免在高并发add的时候，复制多个副本出来，把数据搞乱，导致最终数据不是我们期望的</p><p>由于所有锁操作都是在写的时候进行，分以下几种情况</p><ul><li>写操作未完成</li></ul><p>直接读取原数据</p><ul><li>写操作已经完成，但是还没有指向新的数组</li></ul><p>那也是读取原数组</p><ul><li>写操作已经完成且指向新数组</li></ul><p>那就从新数组中读取数据</p><p>最后总结一下CopyOnWriteArrayList的思想</p><ol><li>读写分离，读和写分开</li><li>最终一致性</li><li>使用另外开辟空间的思路，来解决并发冲突</li></ol><p>最后顺带提一句，我在写这个文章之前看过很多解析，都说什么读写分离，还图文并茂，但都不如我直接看源码来的清晰，所以我非常鼓励大家去读源码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上次CVTE面试的时候，面试官问我ArrayList是线程安全的吗？&lt;/p&gt;
&lt;p&gt;我回答：不是&lt;/p&gt;
&lt;p&gt;他说假设我现在有一个场景需要用集合并且要线程安全，有什么方法&lt;/p&gt;
&lt;p&gt;我会的：可以加synchronized锁，或者用CAS的方法&lt;/p&gt;
&lt;p&gt;他问我有没</summary>
      
    
    
    
    <category term="Java集合" scheme="http://example.com/categories/Java%E9%9B%86%E5%90%88/"/>
    
    
    <category term="Java集合" scheme="http://example.com/tags/Java%E9%9B%86%E5%90%88/"/>
    
    <category term="CopyOnWriteArrayList" scheme="http://example.com/tags/CopyOnWriteArrayList/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础</title>
    <link href="http://example.com/2022/03/08/Redis/Redis%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/03/08/Redis/Redis%E5%9F%BA%E7%A1%80/</id>
    <published>2022-03-08T12:47:26.000Z</published>
    <updated>2022-03-08T12:50:51.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h3 id="连接redis遇到的问题"><a href="#连接redis遇到的问题" class="headerlink" title="连接redis遇到的问题"></a>连接redis遇到的问题</h3><p><a href="https://www.cnblogs.com/invban/p/14187524.html">https://www.cnblogs.com/invban/p/14187524.html</a></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight axapta"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs axapta">redis-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli [options] [commonds]<br></code></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码</li></ul><h2 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h2><ul><li>String: 字符串</li><li>Hash: 散列</li><li>List: 列表</li><li>Set: 集合</li><li>Sorted Set: 有序集合</li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String类型的三种格式：</p><ul><li><p>字符串</p></li><li><p>int</p></li><li><p>float</p></li></ul><p>lSET：添加或者修改已经存在的一个String类型的键值对</p><p>lGET：根据key获取String类型的value</p><p>lMSET：批量添加多个String类型的键值对</p><p>lMGET：根据多个key获取多个String类型的value</p><p>DEL : 删除键值对</p><img src="/2022/03/08/Redis/Redis%E5%9F%BA%E7%A1%80/image-20220308161749004.png" class><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：</p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p><img src="/2022/03/08/Redis/Redis%E5%9F%BA%E7%A1%80/image-20220308162117682.png" class><p>lHSET key field value：添加或者修改hash类型key的field的值</p><p>lHGET key field：获取一个hash类型key的field的值</p><p>lHMSET：批量添加多个hash类型key的field的值</p><p>lHMGET：批量获取多个hash类型key的field的值</p><p>lHGETALL：获取一个hash类型的key中的所有的field和value</p><img src="/2022/03/08/Redis/Redis%E5%9F%BA%E7%A1%80/image-20220308162358308.png" class><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p><p>特征也与LinkedList类似：</p><ul><li><p>有序</p></li><li><p>元素可以重复</p></li><li><p>插入和删除快</p></li><li><p>查询速度一般</p></li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p>lLPUSH key element … ：向列表左侧插入一个或多个元素</p><p>lLPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</p><p>lRPUSH key element … ：向列表右侧插入一个或多个元素</p><p>lRPOP key：移除并返回列表右侧的第一个元素</p><p>lLRANGE key star end：返回一段角标范围内的所有元素</p><p>lBLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</p><img src="/2022/03/08/Redis/Redis%E5%9F%BA%E7%A1%80/image-20220308162613985.png" class><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p><ul><li><p>无序</p></li><li><p>元素不可重复</p></li><li><p>查找快</p></li><li><p>支持交集、并集、差集等功能</p></li></ul><p>lSADD key member … ：向set中添加一个或多个元素</p><p>lSREM key member … : 移除set中的指定元素</p><p>lSCARD key： 返回set中元素的个数</p><p>lSISMEMBER key member：判断一个元素是否存在于set中</p><p>lSMEMBERS：获取set中的所有元素</p><p>lSINTER key1 key2 … ：求key1与key2的交集</p><img src="/2022/03/08/Redis/Redis%E5%9F%BA%E7%A1%80/image-20220308162926178.png" class><img src="/2022/03/08/Redis/Redis%E5%9F%BA%E7%A1%80/image-20220308164338195.png" class><h2 id="Java连接Redis"><a href="#Java连接Redis" class="headerlink" title="Java连接Redis"></a>Java连接Redis</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestConnection</span> &#123;<br>    <span class="hljs-keyword">private</span> Jedis jedis;<br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;    <span class="hljs-comment">// 建立连接</span><br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.23.131&quot;</span>, <span class="hljs-number">6379</span>);<br>        System.out.println(jedis.ping());<br>        <span class="hljs-comment">// 设置密码</span><br><span class="hljs-comment">//        jedis.auth(&quot;xxxx&quot;);</span><br>        <span class="hljs-comment">// 选择库</span><br>        jedis.select(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">TestConnection</span> <span class="hljs-variable">testConnection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestConnection</span>();<br>        testConnection.setUp();<br>        testConnection.testString();<br>        testConnection.tearDown();<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;start&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;ander&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;res = &quot;</span> + res);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Spring-Boot-整合Redis"><a href="#Spring-Boot-整合Redis" class="headerlink" title="Spring Boot 整合Redis"></a>Spring Boot 整合Redis</h2><img src="/2022/03/08/Redis/Redis%E5%9F%BA%E7%A1%80/image-20220308185546271.png" class><p>pom.xml里加入这个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--      连接池依赖--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.23</span><span class="hljs-number">.131</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span>  <span class="hljs-comment"># 最大连接</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span>  <span class="hljs-comment"># 最大空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span>  <span class="hljs-comment"># 最小空闲连接</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">100</span>  <span class="hljs-comment"># 连接等待时间</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickStart</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name= &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义RedisTemplate"><a href="#自定义RedisTemplate" class="headerlink" title="自定义RedisTemplate"></a>自定义RedisTemplate</h3><p>RedisTemplate可以接收任意Object作为值写入Redis，只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的：</p><img src="/2022/03/08/Redis/Redis%E5%9F%BA%E7%A1%80/image-20220308192222115.png" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span>        <span class="hljs-keyword">throws</span> UnknownHostException &#123;    <span class="hljs-comment">// 创建Template</span><br>    RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();    <span class="hljs-comment">// 设置连接工厂</span><br>    redisTemplate.setConnectionFactory(redisConnectionFactory);<br>    <span class="hljs-comment">// 设置序列化工具</span><br>    <span class="hljs-type">GenericJackson2JsonRedisSerializer</span> <span class="hljs-variable">jsonRedisSerializer</span> <span class="hljs-operator">=</span> <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br>    <span class="hljs-comment">// key和 hashKey采用 string序列化</span><br>    redisTemplate.setKeySerializer(RedisSerializer.string()); <br>    redisTemplate.setHashKeySerializer(RedisSerializer.string());<br>    <span class="hljs-comment">// value和 hashValue采用 JSON序列化</span><br>    redisTemplate.setValueSerializer(jsonRedisSerializer);<br>    redisTemplate.setHashValueSerializer(jsonRedisSerializer);<br>    <br>    <span class="hljs-keyword">return</span> redisTemplate;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="/2022/03/08/Redis/Redis%E5%9F%BA%E7%A1%80/image-20220308193212205.png" class><p>为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销。</p><h3 id="手动使用StringRedisTemplate（推荐）"><a href="#手动使用StringRedisTemplate（推荐）" class="headerlink" title="手动使用StringRedisTemplate（推荐）"></a>手动使用StringRedisTemplate（推荐）</h3><p>写入Redis时，手动把对象序列化为JSON</p><p>读取Redis时，手动把读取到的JSON反序列化为对象</p><p>为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。</p><img src="/2022/03/08/Redis/Redis%E5%9F%BA%E7%A1%80/image-20220308193323552.png" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><span class="hljs-comment">// JSON工具</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testStringTemplate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-comment">// 准备对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;虎哥&quot;</span>, <span class="hljs-number">18</span>);<br>    <span class="hljs-comment">// 手动序列化</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br>    <span class="hljs-comment">// 写入一条数据到redis</span><br>    stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:200&quot;</span>, json);<br>    <span class="hljs-comment">// 读取数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:200&quot;</span>);<br>    <span class="hljs-comment">// 反序列化</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> mapper.readValue(val, User.class);<br>    System.out.println(<span class="hljs-string">&quot;user1 = &quot;</span> + user1);<br>&#125;<br></code></pre></td></tr></table></figure><p>切记：此时这个类必须要<strong>添加无参的构造函数</strong>。否则会报错！</p><img src="/2022/03/08/Redis/Redis%E5%9F%BA%E7%A1%80/image-20220308195026207.png" class><p>可以看到反序列化后的对象正常输出</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;h3 id=&quot;连接redis遇到的问题&quot;&gt;&lt;a href=&quot;#连接redis遇到的问题&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode082删除排序链表中的重复元素II</title>
    <link href="http://example.com/2022/03/07/Algo/LeetCode082%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0II/"/>
    <id>http://example.com/2022/03/07/Algo/LeetCode082%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0II/</id>
    <published>2022-03-07T14:42:01.000Z</published>
    <updated>2022-03-10T05:15:38.245Z</updated>
    
    <content type="html"><![CDATA[<p>有两个周没有刷算法题了，今天在剑指offer找到了这道题：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">删除排序链表中的重复元素</a>，当时觉得很简单，但是看到第二道题的时候我本来以为很简单，但是做了一会儿却觉得无从下手。两道题区别为：简单版本是把重复元素删除到剩下一个，而复杂版本是把重复的元素全部删除。</p><p>其实看到这种题目第一步肯定是创建一个dummyHead，因为当第一个节点就是重复节点的时候，有了一个假的头节点会比较好处理，即最后可以返回dummyHead.next。</p><h4 id="删除排序链表中的重复元素-II"><a href="#删除排序链表中的重复元素-II" class="headerlink" title="删除排序链表中的重复元素 II"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/">删除排序链表中的重复元素 II</a></h4><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>注意这里是一个排序链表，<strong>所以它相同的值的节点都是连续的</strong>，这对于我们解题至关重要</p><p>我们可以先创建一个prev节点，然后根据prev节点后面的不同状况来做出不同的处理</p><p>假设有一个链表如图所示：</p><ul><li>情况一</li></ul><img src="/2022/03/07/Algo/LeetCode082%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0II/image-20220307230111383.png" class><p>我们现在假设prev节点为1，head节点为2，此时让head一直向next移动，直到移到不为2的节点，其实就是它本身哈哈。这个时候很简单，我们直接让prev和head向后移动就可以了</p><ul><li>情况二</li></ul><img src="/2022/03/07/Algo/LeetCode082%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0II/image-20220307231356886.png" class><p>我们现在假设prev节点为2，head节点为3，此时让head一直向next移动，直到移到不为3的节点，即移动到红色的3节点处，这个时候直接让prev的next &#x3D; 红色节点的next，然后head后移就可以了</p><p>代码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>, head);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> dummyHead;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span> &amp;&amp; head.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> head;  <span class="hljs-comment">// node 临时存储head</span><br>            <span class="hljs-keyword">while</span> (head.next != <span class="hljs-literal">null</span> &amp;&amp; head.val == head.next.val) head = head.next;<br>            <span class="hljs-keyword">if</span> (head == node) &#123;  <span class="hljs-comment">// 没有重复</span><br>                prev = prev.next;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 有重复</span><br>                prev.next = head.next;<br>            &#125;<br>            head = head.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummyHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此本道题解析结束,在这里多提一句，写这种算法题的解析感觉真的很比平时写别的文章麻烦很多啊，但我相信多多沉淀总是好的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有两个周没有刷算法题了，今天在剑指offer找到了这道题：&lt;a href=&quot;https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/&quot;&gt;删除排序链表中的重复元素&lt;/a&gt;，当时觉得很简单，但是看到</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>AQS源码剖析</title>
    <link href="http://example.com/2022/03/05/JUC/AQS%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    <id>http://example.com/2022/03/05/JUC/AQS%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</id>
    <published>2022-03-05T13:07:04.000Z</published>
    <updated>2022-03-05T15:02:56.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AQS源码剖析"><a href="#AQS源码剖析" class="headerlink" title="AQS源码剖析"></a>AQS源码剖析</h1><h2 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h2><p>AQS (AbstractQueuedSynchronizer)是一个锁框架，它定义了锁的机制，开放出了可以拓展的地方，AQS开放出来state字段，让子类可以根据state字段决定是否可以获取锁，对于获取不到的会进行自动管理，子类无需担心。接下来我会在源码上带大家一起了解一下AQS</p><blockquote><p>在看的时候我十分希望你也点进源码里去看一看，你会发现不一样的世界。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Head of the wait queue, lazily initialized.  Except for</span><br><span class="hljs-comment"> * initialization, it is modified only via method setHead.  Note:</span><br><span class="hljs-comment"> * If head exists, its waitStatus is guaranteed not to be</span><br><span class="hljs-comment"> * CANCELLED.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 等待队列的头部，延迟初始化。 除了</span><br><span class="hljs-comment">  * 初始化，只能通过setHead方法修改。 </span><br><span class="hljs-comment">  笔记：</span><br><span class="hljs-comment">  * 如果head存在，则保证其waitStatus不能被取消</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node head;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Tail of the wait queue, lazily initialized.  Modified only via</span><br><span class="hljs-comment"> * method enq to add new wait node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 等待队列的尾部，延迟初始化。 仅通过修改</span><br><span class="hljs-comment">  * 方法 enq 添加新的等待节点。</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node tail;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The synchronization state.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 同步状态。</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> state;<br></code></pre></td></tr></table></figure><p>这是AQS源码里的三个成员属性</p><p>state用于判断共享资源是否被正在占用的标记位，volatile保证线程可见性，</p><p>资源占用有两种模式，独占（自己占用别人就不能占用），共享（自己占用，其他共享线程也能占用）</p><p>因此共享模式下可能会有多个线程正在共享资源，而int 类型则能表示共享线程数目。</p><p>如果一个线程在当前时刻没有获取到共享资源，那它就可以排队，而AQS是一个FIFO(先进先出)的双向链表，head 和 tail分别为头和尾。</p><p>Node源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/** waitStatus value to indicate thread has cancelled. */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CANCELLED</span> <span class="hljs-operator">=</span>  <span class="hljs-number">1</span>;<br><span class="hljs-comment">/** waitStatus value to indicate successor&#x27;s thread needs unparking. */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SIGNAL</span>    <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-comment">/** waitStatus value to indicate thread is waiting on condition. */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CONDITION</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * waitStatus value to indicate the next acquireShared should</span><br><span class="hljs-comment"> * unconditionally propagate.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PROPAGATE</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3</span>;<br><span class="hljs-comment">// 等待状态</span><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> waitStatus;<br><span class="hljs-comment">// 前指针</span><br><span class="hljs-keyword">volatile</span> Node prev;<br><span class="hljs-comment">// 后指针</span><br><span class="hljs-keyword">volatile</span> Node next;<br><span class="hljs-comment">// 线程对象</span><br><span class="hljs-keyword">volatile</span> Thread thread;<br></code></pre></td></tr></table></figure><p>上面四个为枚举值，用来表示线程的状态</p><h2 id="acquire方法"><a href="#acquire方法" class="headerlink" title="acquire方法"></a>acquire方法</h2><p>接下来我们介绍acquire方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp;<br>        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>        selfInterrupt();<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法为final方法，不允许子类进行重写</p><p>如果acquireQueued尝试获得锁成功那就会直接跳出判断不再执行后面</p><p>如果获得失败那就会acquireQueued进入等待队列</p><p>下面我们详细分析acquireQueued和addWaiter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addWaiter</span><span class="hljs-params">(Node mode)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(mode);<br><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">oldTail</span> <span class="hljs-operator">=</span> tail;<br>            <span class="hljs-keyword">if</span> (oldTail != <span class="hljs-literal">null</span>) &#123;<br>                node.setPrevRelaxed(oldTail);<br>                <span class="hljs-keyword">if</span> (compareAndSetTail(oldTail, node)) &#123;<br>                    oldTail.next = node;<br>                    <span class="hljs-keyword">return</span> node;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                initializeSyncQueue();<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这是addWaiter源码，作用是将当前线程封装为一个node，插入等待队列，最后返回尾节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();<br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<br>                setHead(node);<br>                p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>                <span class="hljs-keyword">return</span> interrupted;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node))<br>                interrupted |= parkAndCheckInterrupt();<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        cancelAcquire(node);<br>        <span class="hljs-keyword">if</span> (interrupted)<br>            selfInterrupt();<br>        <span class="hljs-keyword">throw</span> t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果当前节点是头节点的前一个节点，而且当前线程尝试获取锁成功了，那就直接返回当前节点。在这里强调一下，头节点是一个<strong>虚节点</strong>，意思是，头节点并不是当前需要去拿锁的节点，它只是一个占位摆设，而第二个节点才是真正要拿锁的节点，当它拿到锁以后，它就会变成头节点，头节点就会出队，所以在AQS源码经常会看到判断前置节点是否为头节点的代码。</p><p>if (shouldParkAfterFailedAcquire(p, node))线程如果获取锁失败后，那就要判断线程是否需要挂起了，为什么不自旋？因为自旋是一个很耗费CPU的操作，如果大量线程自旋，那会很耗费CPU，而挂起，在合适的适合叫醒，那就会很好缓解这个问题。</p><p>什么时候需要挂起呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldParkAfterFailedAcquire</span><span class="hljs-params">(Node pred, Node node)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> pred.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws == Node.SIGNAL)<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * This node has already set status asking a release</span><br><span class="hljs-comment">         * to signal it, so it can safely park.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Predecessor was cancelled. Skip over predecessors and</span><br><span class="hljs-comment">         * indicate retry.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            node.prev = pred = pred.prev;<br>        &#125; <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>);<br>        pred.next = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span><br><span class="hljs-comment">         * need a signal, but don&#x27;t park yet.  Caller will need to</span><br><span class="hljs-comment">         * retry to make sure it cannot acquire before parking.</span><br><span class="hljs-comment">         */</span><br>        pred.compareAndSetWaitStatus(ws, Node.SIGNAL);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果当前节点前置节点状态为SIGNAL，即前置节点也在等待锁，那就当前节点肯定拿不到锁，当前线程就是可以直接挂起的。</p><p>如果它状态大于0，那状态只能是CANCEL，就把它从队列删除，如果是其他状态，既然当前节点已经加入了，那它的前置节点就应该做好等待获取锁，通过CAS的方法将前置节点修改为SIGNAL，这两种情况返回的是false。</p><img src="/2022/03/05/JUC/AQS%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/image-20220305222310019.png" class><blockquote><p>注：这里提示一下，以前看到这张图的时候，我以为所有node公用一个state,其实每个node都有一个state</p></blockquote><p>通过分析acquire方法，如果当前线程所在节点处于头节点的后面一个，那就会不断尝试进行拿锁，直到成功，否则就会进行挂起，如何判断是否需要挂起呢？那就是当前节点之前除了head还有别的节点，且状态为SINGLE那当前节点就需要被挂起，这样就能让head后只能有一个节点来获取锁，这样就能避免自旋消耗CPU，</p><h2 id="release"><a href="#release" class="headerlink" title="release"></a>release</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>            unparkSuccessor(h);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>release是用来释放锁的，加入尝试释放锁成功，那下一步就要去等待其他的节点，这里来分析一下unparkSuccessor方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unparkSuccessor</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * If status is negative (i.e., possibly needing signal) try</span><br><span class="hljs-comment">     * to clear in anticipation of signalling.  It is OK if this</span><br><span class="hljs-comment">     * fails or if status is changed by waiting thread.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> node.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws &lt; <span class="hljs-number">0</span>)<br>        node.compareAndSetWaitStatus(ws, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Thread to unpark is held in successor, which is normally</span><br><span class="hljs-comment">     * just the next node.  But if cancelled or apparently null,</span><br><span class="hljs-comment">     * traverse backwards from tail to find the actual</span><br><span class="hljs-comment">     * non-cancelled successor.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">          * unpark 的线程由后继保持，这很正常</span><br><span class="hljs-comment">          * 如果只唤醒下一个节点。 但如果取消或明显为空，</span><br><span class="hljs-comment">          * 从尾部向后遍历找到实际的</span><br><span class="hljs-comment">          * 未取消的继任者。</span><br><span class="hljs-comment">          */</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.waitStatus &gt; <span class="hljs-number">0</span>) &#123;<br>        s = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail; p != node &amp;&amp; p != <span class="hljs-literal">null</span>; p = p.prev)<br>            <span class="hljs-keyword">if</span> (p.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                s = p;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-literal">null</span>)<br>        LockSupport.unpark(s.thread);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的参数node是acquireQueued的幸运儿，它早就获得了锁，它是链表的头节点，它首先通过CAS的方法把ws变为了0，这样就不会影响其他函数的判断。然后不停的向后找，找一个除了head外最靠前的节点，且waitStatus&lt;&#x3D;0的节点，然后对其LockSupport.unpark(s.thread);就是唤醒它，让它去争抢锁，被唤醒的线程会去执行acquire尝试自旋获取，这就形成了一个循环，还有值得一提的是这里的唤醒是从尾部向前唤醒获取的，请看注释！</p><h2 id="tryAcquire方法"><a href="#tryAcquire方法" class="headerlink" title="tryAcquire方法"></a>tryAcquire方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这很简单，就是让子类去继承的一个方法，参数int表示对state的修改，返回值是bool表示是否获取锁，这就是让子类去重写这个方法否则就抛出不支持该操作的异常。拿这就给了上层很大的施展空间。</p><h2 id="tryRelase"><a href="#tryRelase" class="headerlink" title="tryRelase"></a>tryRelase</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法与tryAcquire类似，这里不进行讲解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AQS源码剖析&quot;&gt;&lt;a href=&quot;#AQS源码剖析&quot; class=&quot;headerlink&quot; title=&quot;AQS源码剖析&quot;&gt;&lt;/a&gt;AQS源码剖析&lt;/h1&gt;&lt;h2 id=&quot;什么是AQS&quot;&gt;&lt;a href=&quot;#什么是AQS&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="JUC" scheme="http://example.com/categories/JUC/"/>
    
    
    <category term="AQS" scheme="http://example.com/tags/AQS/"/>
    
    <category term="JUC" scheme="http://example.com/tags/JUC/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="http://example.com/2022/03/05/JUC/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://example.com/2022/03/05/JUC/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
    <published>2022-03-05T09:15:43.000Z</published>
    <updated>2022-03-05T11:58:10.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>最近我去了一家小公司，遇到驰哥（我的小leader），驰哥人非常Nice,大概大我两岁哈哈。讲了很多我以后可能会遇到的困难，我进去就问他了线程池的相关内容，他也仔细为我讲解了一番，接下来我写一篇文章详细记录一下。</p><p>刚开始我以为线程池很难，但是深入了解以后发现也就那样吧~</p><p>下面开始正文</p><p>Java语言虽然内置了多线程支持，启动一个新线程非常方便，但是，创建线程需要操作系统资源（线程资源，栈空间等），频繁创建和销毁大量线程需要消耗大量时间。</p><img src="/2022/03/05/JUC/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20220305172101024.png" class><p>那么我们就可以把很多小任务让一组线程来执行，而不是一个任务对应一个新线程。这种能接收大量小任务并进行分发处理的就是线程池。</p><p>简单地说，线程池内部维护了若干个线程，没有任务的时候，这些线程都处于等待状态。如果有新任务，就分配一个空闲线程执行。如果所有线程都处于忙碌状态，新任务要么放入队列等待，要么增加一个新线程进行处理。</p><p>就像是你开了一个饭馆（运行的程序），有一群人过来吃饭（多个任务），每一个人都需要一个服务员（需要多线程），你现在每次过来一个人就招聘一个服务员然后用完后将服务员辞退，这样就会消耗大量资源。</p><p>但是我们可以换一种方式，我们给餐馆里先放几个服务员，当服务员服务完以后就让它服务下一个或者休息，这样就能减少招聘和辞退的时间开销了</p><h2 id="线程池的参数"><a href="#线程池的参数" class="headerlink" title="线程池的参数"></a>线程池的参数</h2><h3 id="ThreadPoolExecutor的构造方法源码"><a href="#ThreadPoolExecutor的构造方法源码" class="headerlink" title="ThreadPoolExecutor的构造方法源码"></a><strong>ThreadPoolExecutor的构造方法源码</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new &#123;<span class="hljs-doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span><br><span class="hljs-comment">     * parameters, the default thread factory and the default rejected</span><br><span class="hljs-comment">     * execution handler.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;It may be more convenient to use one of the &#123;<span class="hljs-doctag">@link</span> Executors&#125;</span><br><span class="hljs-comment">     * factory methods instead of this general purpose constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span><br><span class="hljs-comment">     *        if they are idle, unless &#123;<span class="hljs-doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span><br><span class="hljs-comment">     *        pool</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keepAliveTime when the number of threads is greater than</span><br><span class="hljs-comment">     *        the core, this is the maximum time that excess idle threads</span><br><span class="hljs-comment">     *        will wait for new tasks before terminating.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> unit the time unit for the &#123;<span class="hljs-doctag">@code</span> keepAliveTime&#125; argument</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> workQueue the queue to use for holding tasks before they are</span><br><span class="hljs-comment">     *        executed.  This queue will hold only the &#123;<span class="hljs-doctag">@code</span> Runnable&#125;</span><br><span class="hljs-comment">     *        tasks submitted by the &#123;<span class="hljs-doctag">@code</span> execute&#125; method.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span><br><span class="hljs-comment">     *         &#123;<span class="hljs-doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span><br><span class="hljs-comment">     *         &#123;<span class="hljs-doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span><br><span class="hljs-comment">     *         &#123;<span class="hljs-doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span><br><span class="hljs-comment">     *         &#123;<span class="hljs-doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException if &#123;<span class="hljs-doctag">@code</span> workQueue&#125; is null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                              <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                              <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                              TimeUnit unit,</span><br><span class="hljs-params">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> &#123;<br>        <span class="hljs-built_in">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,<br>             Executors.defaultThreadFactory(), defaultHandler);<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到上面有七个参数</p><p><strong>核心线程数：corePoolSize</strong></p><p>线程池中活跃的线程数，即使它们是空闲的，除非设置了allowCoreThreadTimeOut为true。allowCoreThreadTimeOut的值是控制核心线程数是否在没有任务时是否停止活跃的线程，当它的值为true时，在线程池没有任务时，所有的工作线程都会停止。</p><p><strong>最大线程数：maximumPoolSize</strong></p><p>线程池所允许存在的最大线程数。</p><p>非核心线程数量&#x3D;maximumPoolSize-corePoolSize</p><p><strong>多余线程存活时长：keepAliveTime</strong></p><p>线程池中除核心线程数之外的线程（多余线程）的最大存活时间，如果在这个时间范围内，多余线程没有任务需要执行，则多余线程就会停止。(注意：多余线程数 &#x3D; 最大线程数 - 核心线程数)</p><p><strong>时间单位：unit</strong></p><p>多余线程存活时间的单位，可以是分钟、秒、毫秒等。</p><p><strong>任务队列：workQueue</strong></p><p>ArrayBlockingQueue,LinkBlockingQueue</p><p>线程池的任务队列，使用线程池执行任务时，任务会先提交到这个队列中，然后工作线程取出任务进行执行，当这个队列满了，线程池就会执行拒绝策略。</p><p><strong>线程工厂：threadFactory</strong></p><p>创建线程池的工厂，线程池将使用这个工厂来创建线程池，自定义线程工厂需要实现ThreadFactory接口。</p><p><strong>拒绝执行处理器（也称拒绝策略）：handler</strong></p><ul><li>AbortPolicy：线程任务丢弃报错（默认）</li><li>DiscardPolicy：线程任务丢弃不报错 </li><li>DiscardOldestPolicy：将worlQueue队首任务丢弃，将最新的线程任务加入到线程队列</li><li>CallerRunsPolicy：线程池外的线程直接调用run方法执行</li></ul><p>当线程池无空闲线程，并且任务队列已满，此时将线程池将使用这个处理器来处理新提交的任务。</p><h2 id="线程池执行流程"><a href="#线程池执行流程" class="headerlink" title="线程池执行流程"></a>线程池执行流程</h2><img src="/2022/03/05/JUC/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20220305174918009.png" class><ol><li>线程池执行execute&#x2F;submit方法向线程池添加任务，当线程数小于corePoolSize的时候，线程池就可以创建新的线程</li><li>当任务大于核心线程数时，就向队列添加任务</li><li>如果队列满了，就要通过比较maxinumPolSize，如果当前线程数小于maxinumPolSize在线程池创建新的线程，否则就会执行饱和策略</li></ol><p>在这里举个驰哥给我讲的例子：假如现在有银行就是我们的线程池，现在银行有5个业务员（corePoolSize），50个座位（workQueue），还有5个办公座位但是他们都去休假了（maximumPoolSize-corePoolSize），现在有50个人去办理业务，刚开始5个营业员全部上阵，即corePoolSize全部挂起，但是人实在是太多了，用户就不得不坐到座位上去排队，多余的进入阻塞队列workQueue，但是这个时候座位也不够用了，行长会立刻把其他的5个休假的员工全部叫回来工作，然后让此时还没有坐下或者办理业务的直接回家，同时银行关门（AbortPolicy），或者然后让此时还没有坐下或者办理业务的直接回家，但是银行不关门（AbortPolicy），或者让正在办理的直接停止办理，让其他还没坐下的进行办理（AbortPolicy）。当办理的差不多的时候，银行还在休假却被迫叫回来工作的人当闲置超过一定时间(keepAliveTime)后,行长就会叫他们回去休息。</p><h2 id="线程池类型"><a href="#线程池类型" class="headerlink" title="线程池类型"></a>线程池类型</h2><p>当大家看到这些线程池类型的时候不要害怕，其实就是提前把一些核心线程规定死了，Executors类中存储了各种类型参数，接下来我会在源码层面来剖析下面的几种线程</p><h3 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> nThreads)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(nThreads, nThreads,<br>                                  <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> nThreads, ThreadFactory threadFactory)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(nThreads, nThreads,<br>                                      <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                      <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),<br>                                      threadFactory);<br>    &#125;<br></code></pre></td></tr></table></figure><p>看一下上面的构造方法</p><p>核心线程数，最大线程数为同一个值且自己指定</p><p>相比下面将要介绍的newCachedThreadPool，newFixedThreadPool 可控制线程最大并发数，当线程池中的线程数达到其设定大小时，其余新创建的线程会在LinkedBlockingQueue队列中等待。当线程池中的某个线程失败而终止时，新的线程会代替它执行剩下的任务。线程池中的线程只有在显式调用shutdown函数时才会退出线程池</p><h3 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newCachedThreadPool</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">0</span>, Integer.MAX_VALUE,<br>                                  <span class="hljs-number">60L</span>, TimeUnit.SECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;Runnable&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><p>核心线程数，最大线程数2^31-1,最大空闲时间60s</p><p>创建 <strong>可缓存</strong>线程池，当线程池中的线程空闲时间超过60s，便会终止该空闲线程并从缓存线程池中移除</p><p>该线程池<strong>可根据需要，创建新线程</strong>，从上面代码中可以看出，其线程数最大可为Integer.MAX_VALUE，如果控制不好，使用该线程池可能导致线程创建过多，反而影响性能。因此，可以注意一下该线程池的使用场景：对于<strong>大量短暂异步任务</strong>的程序来说，使用该线程池能够<strong>大大提高性能</strong> </p><p>在使用CachedThreadPool时，一定要注意控制任务的数量，否则，由于大量线程同时运行，很有会造成系统OOM。</p><h3 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h3><p>创建<strong>单线程</strong>的线程池 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newSingleThreadExecutor</span><span class="hljs-params">(ThreadFactory threadFactory)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FinalizableDelegatedExecutorService</span><br>        (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                                <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),<br>                                threadFactory));<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到构造函数里只允许一个线程</p><p>该单线程在shutdown之前由于失败而终止时，将会有新的线程来代替它执行剩下任务。加入到该线程池里的线程会按顺序执行，一个时刻保证 <strong>只有一个线程</strong>在运行</p><h3 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h3><p>创建 <strong>固定大小</strong>且能够执行 <strong>定时或周期性</strong>任务的线程池 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ScheduledExecutorService <span class="hljs-title function_">newScheduledThreadPool</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-type">int</span> corePoolSize, ThreadFactory threadFactory)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledThreadPoolExecutor</span>(corePoolSize, threadFactory);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到这里指定了corePoolSize 和工厂类型</p><h2 id="线程池常用阻塞队列"><a href="#线程池常用阻塞队列" class="headerlink" title="线程池常用阻塞队列"></a>线程池常用阻塞队列</h2><h3 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h3><p>是一个基于数组结构的<strong>有界</strong>阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序。</p><img src="/2022/03/05/JUC/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20220305193326775.png" class><ul><li>ArrayBlockingQueue是一个用数组实现的有界阻塞队列。</li><li>队列慢时插入操作被阻塞，队列空时，移除操作被阻塞。</li><li>按照先进先出（FIFO）原则对元素进行排序。</li><li>默认不保证线程公平的访问队列。</li><li>公平访问队列：按照阻塞的先后顺序访问队列，即先阻塞的线程先访问队列。</li><li>非公平性是对先等待的线程是非公平的，当队列可用时，阻塞的线程都可以争夺访问队列的资格。有可能先阻塞的线程最后才访问访问队列。</li><li>公平性会降低吞吐量。</li></ul><h3 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h3><p>一个基于链表结构的阻塞队列，此队列按 FIFO 排序元素，吞吐量通常要高于 ArrayBlockingQueue。静态工厂方法 Executors.newFixedThreadPool() 使用了这个队列。（newFixedThreadPool 用于创建固定线程数）</p><img src="/2022/03/05/JUC/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20220305193501103.png" class><ul><li>LinkedBlockingQueue具有单链表和<strong>无界</strong>阻塞队列的功能。</li><li>队列慢时插入操作被阻塞，队列空时，移除操作被阻塞。</li><li>默认和最大长度为Integer.MAX_VALUE，相当于无界(值非常大：2^31-1)。</li></ul><h3 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h3><p>一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于 LinkedBlockingQueue，静态工厂方法 Executors.newCachedThreadPool 使用这个队列。（newCachedThreadPool 用于根据需要创建新线程）</p><img src="/2022/03/05/JUC/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20220305194503741.png" class><h3 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h3><p>一个具有优先级的无限阻塞队列。</p><h2 id="如何合理配置线程池参数"><a href="#如何合理配置线程池参数" class="headerlink" title="如何合理配置线程池参数"></a>如何合理配置线程池参数</h2><p>自定义线程池需要配置maxinumPoolSize</p><h3 id="CPU密集型"><a href="#CPU密集型" class="headerlink" title="CPU密集型"></a>CPU密集型</h3><p>CPU密集型意思是该任务需要大量的运算，没有阻塞，CPU一直全速运行，CPU密集型只有在多核CPU才可以加速，而单核CPU无论几个线程都不可能加速。</p><h3 id="IO密集型"><a href="#IO密集型" class="headerlink" title="IO密集型"></a>IO密集型</h3><p>即该任务需要大量IO，即大量的阻塞，单线程上运行IO密集型任务会导致大量CPU浪费在阻塞上，所以多线程可以使用IO密集型</p><p>IO密集型公式如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CPU</span>核数*<span class="hljs-number">2</span><br><br><span class="hljs-attribute">CPU</span>核数/（<span class="hljs-number">1</span>-阻塞系数）阻塞系数通常在<span class="hljs-number">0</span>.<span class="hljs-number">8</span>~<span class="hljs-number">0</span>.<span class="hljs-number">9</span> <br></code></pre></td></tr></table></figure><h3 id="得到自己的CPU核数"><a href="#得到自己的CPU核数" class="headerlink" title="得到自己的CPU核数"></a>得到自己的CPU核数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCpuCoreNumber</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Runtime.getRuntime().availableProcessors());<br>    &#125;<br></code></pre></td></tr></table></figure><img src="/2022/03/05/JUC/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20220305195451067.png" class><p>可以看到我的电脑为8核</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线程池&quot;&gt;&lt;a href=&quot;#线程池&quot; class=&quot;headerlink&quot; title=&quot;线程池&quot;&gt;&lt;/a&gt;线程池&lt;/h1&gt;&lt;p&gt;最近我去了一家小公司，遇到驰哥（我的小leader），驰哥人非常Nice,大概大我两岁哈哈。讲了很多我以后可能会遇到的困难，我进去就</summary>
      
    
    
    
    <category term="JUC" scheme="http://example.com/categories/JUC/"/>
    
    
    <category term="JUC" scheme="http://example.com/tags/JUC/"/>
    
    <category term="线程池" scheme="http://example.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Stream</title>
    <link href="http://example.com/2022/03/04/Java%E5%9F%BA%E7%A1%80/Stream/"/>
    <id>http://example.com/2022/03/04/Java%E5%9F%BA%E7%A1%80/Stream/</id>
    <published>2022-03-04T08:26:11.000Z</published>
    <updated>2022-03-04T08:34:22.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h1><p>速度更快</p><p><strong>lanbda表达式</strong></p><p><strong>强大的Stream API</strong></p><p>便于并行</p><p>最大化减少空指针异常 Optional</p><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>即一种匿名函数，可以将其理解为一段可以传递的到吗。可以用通过它写出更加简介灵活的代码。</p><figure class="highlight livescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-function"><span class="hljs-params">(参数类型，参数名称)</span> -&gt;</span>&#123;代码体&#125;<br></code></pre></td></tr></table></figure><p><strong>格式说明</strong></p><ul><li>(参数类型，参数名称)： 参数列表</li><li>{代码体}：方法体</li><li>-&gt;分割参数和代码</li></ul><h2 id="lambda常用方法举例"><a href="#lambda常用方法举例" class="headerlink" title="lambda常用方法举例"></a>lambda常用方法举例</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">threadTest2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 准备一个集合，按照年龄进行排序</span><br>    <span class="hljs-type">List</span> <span class="hljs-variable">persons</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">3</span>));<br>    persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">2</span>));<br>    persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">3</span>));<br>    persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">4</span>));<br>    Collections.sort(persons, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Person&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Person o1, Person o2)</span> &#123;<br>            <span class="hljs-keyword">return</span> o2.getAge() - o1.getAge();<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// lambda方法</span><br>    Collections.sort(persons, ((Person o1, Person o2) -&gt; o1.getAge() - o2.getAge()));<br>    <span class="hljs-comment">// Comparator方法</span><br>    Collections.sort(persons, (Comparator.comparingInt(Person::getAge)));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">threadTest</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;run.&quot;</span>);<br>        &#125;<br>    &#125;).start();<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">threadTest1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt; System.out.println(<span class="hljs-string">&quot;run...&quot;</span>)).start();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><img src="/2022/03/04/Java%E5%9F%BA%E7%A1%80/Stream/image-20220304142440618.png" class><p>stream流式思想类似于<strong>生产流水线</strong>，Stream流不是一种数据结构，不保存数据，而是对数据进行加工 处理。Stream可以看作是流水线上的一个工序。在流水线上，通过多个工序让一个原材料加工成一个商品。</p><p>Stream API能让我们快速完成许多复杂的操作，如筛选、切片、映射、查找、去除重复，统计，匹配和归约。</p><h3 id="获取stream流两种方式"><a href="#获取stream流两种方式" class="headerlink" title="获取stream流两种方式"></a>获取stream流两种方式</h3><h4 id="根据Collection获取流"><a href="#根据Collection获取流" class="headerlink" title="根据Collection获取流"></a>根据Collection获取流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 集合获取流</span><br><span class="hljs-comment">// Collection接口中的方法: default Stream&lt;E&gt; stream() 获取流</span><br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">// ...</span><br>Stream&lt;String&gt; stream1 = list.stream();<br>Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><span class="hljs-comment">// ...</span><br>Stream&lt;String&gt; stream2 = set.stream();<br>Vector&lt;String&gt; vector = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<br><span class="hljs-comment">// ...</span><br>Stream&lt;String&gt; stream3 = vector.stream();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>java.util.Map</code> 接口不是 Collection 的子接口，所以获取对应的流需要分key、value或entry等情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// Map获取流</span><br>Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-comment">// ...</span><br>Stream&lt;String&gt; keyStream = map.keySet().stream();<br>Stream&lt;String&gt; valueStream = map.values().stream();<br>Stream&lt;Map.Entry&lt;String, String&gt;&gt; entryStream = map.entrySet().stream();<br>&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-comment">// Map获取流 Map map = new HashMap&lt;&gt;(); // ... Stream keyStream = map.keySet().stream(); Stream valueStream = map.values().stream(); Stream&gt; entryStream = map.entrySet().stream(); &#125;</span><br></code></pre></td></tr></table></figure><h4 id="方式2-Stream中的静态方法of获取流"><a href="#方式2-Stream中的静态方法of获取流" class="headerlink" title="方式2 : Stream中的静态方法of获取流"></a>方式2 : Stream中的静态方法of获取流</h4><p>由于数组对象不可能添加默认方法，所以 Stream 接口中提供了静态方法 of ，使用很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// Stream中的静态方法: static Stream of(T... values)</span><br>Stream&lt;String&gt; stream6 = Stream.of(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>);<br>String[] arr = &#123;<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>&#125;;<br>Stream&lt;String&gt; stream7 = Stream.of(arr);<br>Integer[] arr2 = &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>&#125;;<br>Stream&lt;Integer&gt; stream8 = Stream.of(arr2);<br><span class="hljs-comment">// 注意:基本数据类型的数组不行</span><br><span class="hljs-type">int</span>[] arr3 = &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>&#125;;<br>Stream&lt;<span class="hljs-type">int</span>[]&gt; stream9 = Stream.of(arr3);<br></code></pre></td></tr></table></figure><blockquote><p> 备注： of 方法的参数其实是一个可变参数，所以支持数组。</p></blockquote><h3 id="stream-常用方法"><a href="#stream-常用方法" class="headerlink" title="stream 常用方法"></a>stream 常用方法</h3><table><thead><tr><th>方法名</th><th>方法作用</th><th>返回值</th><th>方法种类</th></tr></thead><tbody><tr><td>forEach</td><td>逐一处理</td><td>void</td><td>终结</td></tr><tr><td>count</td><td>统计个数</td><td>long</td><td>终结</td></tr><tr><td>filter</td><td>过滤</td><td>Stream</td><td>函数拼接</td></tr><tr><td>limit</td><td>取用前几个</td><td>Stream</td><td>函数拼接</td></tr><tr><td>skip</td><td>跳过前几个</td><td>Stream</td><td>函数拼接</td></tr><tr><td>map</td><td>映射</td><td>Stream</td><td>函数拼接</td></tr><tr><td>concat</td><td>组合</td><td>Stream</td><td>函数拼接</td></tr></tbody></table><p>终结方法：返回值类型不再是 Stream 类型的方法，不再支持链式调用。本小节中，终结方法包括 count 和 forEach 方法。 </p><p>非终结方法：返回值类型仍然是 Stream 类型的方法，支持链式调用。（除了终结方法外，其余方法均为非终结 方法。）</p><h3 id="stream注意事项"><a href="#stream注意事项" class="headerlink" title="stream注意事项"></a>stream注意事项</h3><ol><li>Stream只能操作一次 </li><li>Stream方法返回的是新的流</li><li>不调用终结方法，中间的操作不会执行</li></ol><h3 id="高级集合的stream方法"><a href="#高级集合的stream方法" class="headerlink" title="高级集合的stream方法"></a>高级集合的stream方法</h3><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>forEach 用来遍历流中的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testForEach</span><span class="hljs-params">()</span> &#123;<br>        List&lt;String&gt; one = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(one, <span class="hljs-string">&quot;迪丽热巴&quot;</span>, <span class="hljs-string">&quot;宋远桥&quot;</span>, <span class="hljs-string">&quot;苏星河&quot;</span>, <span class="hljs-string">&quot;老子&quot;</span>, <span class="hljs-string">&quot;庄子&quot;</span>, <span class="hljs-string">&quot;孙子&quot;</span>);<br>        one.stream().forEach((String s) -&gt; &#123;<br>            System.out.println(s);<br>        &#125;);<br>        <span class="hljs-comment">// 简写</span><br>        one.stream().forEach(s -&gt; System.out.println(s));<br>        one.stream().forEach(System.out::println);<br>        one.forEach(System.out::println);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">testCount</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; one = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-title class_">Collections</span>.<span class="hljs-title function_">addAll</span>(one, <span class="hljs-string">&quot;迪丽热巴&quot;</span>, <span class="hljs-string">&quot;宋远桥&quot;</span>, <span class="hljs-string">&quot;苏星河&quot;</span>, <span class="hljs-string">&quot;老子&quot;</span>, <span class="hljs-string">&quot;庄子&quot;</span>, <span class="hljs-string">&quot;孙子&quot;</span>);<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(one.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">count</span>());<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>可以通过 filter 方法将一个流转换成另一个子集流。方法声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream&lt;T&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-built_in">super</span> T&gt; predicate)</span><br></code></pre></td></tr></table></figure><img src="/2022/03/04/Java%E5%9F%BA%E7%A1%80/Stream/image-20220304150606735.png" class><p>该接口接收一个 Predicate 函数式接口参数（可以是一个Lambda或方法引用）作为筛选条件。</p><p> Stream流中的 filter 方法基本使用的代码如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFilter</span><span class="hljs-params">()</span> &#123;<br>List&lt;String&gt; one = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(one, <span class="hljs-string">&quot;迪丽热巴&quot;</span>, <span class="hljs-string">&quot;宋远桥&quot;</span>, <span class="hljs-string">&quot;苏星河&quot;</span>, <span class="hljs-string">&quot;老子&quot;</span>, <span class="hljs-string">&quot;庄子&quot;</span>, <span class="hljs-string">&quot;孙子&quot;</span>);<br>one.stream().filter(s -&gt; s.length() == <span class="hljs-number">2</span>).forEach(System.out::println);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p>limit 方法可以对流进行截取，只取用前n个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLimit</span><span class="hljs-params">()</span> &#123;<br>List&lt;String&gt; one = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(one, <span class="hljs-string">&quot;迪丽热巴&quot;</span>, <span class="hljs-string">&quot;宋远桥&quot;</span>, <span class="hljs-string">&quot;苏星河&quot;</span>, <span class="hljs-string">&quot;老子&quot;</span>, <span class="hljs-string">&quot;庄子&quot;</span>, <span class="hljs-string">&quot;孙子&quot;</span>);<br>one.stream().limit(<span class="hljs-number">3</span>).forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSkip</span><span class="hljs-params">()</span> &#123;<br>List&lt;String&gt; one = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(one, <span class="hljs-string">&quot;迪丽热巴&quot;</span>, <span class="hljs-string">&quot;宋远桥&quot;</span>, <span class="hljs-string">&quot;苏星河&quot;</span>, <span class="hljs-string">&quot;老子&quot;</span>, <span class="hljs-string">&quot;庄子&quot;</span>, <span class="hljs-string">&quot;孙子&quot;</span>);<br>one.stream().skip(<span class="hljs-number">2</span>).forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="stream流中的方法"><a href="#stream流中的方法" class="headerlink" title="stream流中的方法"></a>stream流中的方法</h3><h4 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a>map方法</h4><p>利用map方法用一个对另一个进行映射</p><img src="/2022/03/04/Java%E5%9F%BA%E7%A1%80/Stream/image-20220304152557456.png" class><p>该接口需要一个 Function 函数式接口参数，可以将当前流中的T类型数据转换为另一种R类型的流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMap</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">// 转化为流式数据</span><br>       Stream&lt;String&gt; original = Stream.of(<span class="hljs-string">&quot;11&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>, <span class="hljs-string">&quot;33&quot;</span>);<br>       <span class="hljs-comment">// 流式数据利用map进行映射</span><br>       Stream&lt;Integer&gt; result = original.map(Integer::parseInt);<br>       <span class="hljs-comment">// 进行遍历</span><br>       result.forEach(s -&gt; System.out.println(s + <span class="hljs-number">10</span>));<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="sorted方法"><a href="#sorted方法" class="headerlink" title="sorted方法"></a>sorted方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSorted</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// sorted(): 根据元素的自然顺序排序</span><br><span class="hljs-comment">// sorted(Comparator&lt;? super T&gt; comparator): 根据比较器指定的规则排序</span><br>Stream.of(<span class="hljs-number">33</span>, <span class="hljs-number">22</span>, <span class="hljs-number">11</span>, <span class="hljs-number">55</span>)<br>.sorted()<br>.sorted((o1, o2) -&gt; o2 - o1)<br>.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h4><p>用来去除重复数据，自定义对象根据对象的hashCode和equals来去除重复元素的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDistinct</span><span class="hljs-params">()</span> &#123;<br>Stream.of(<span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">22</span>, <span class="hljs-number">11</span>, <span class="hljs-number">33</span>)<br>.distinct()<br>.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><p>用于条件匹配，返回true或false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMatch</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Stream.of(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>)<br><span class="hljs-comment">// .allMatch(e -&gt; e &gt; 0); // allMatch: 元素是否全部满足条件</span><br><span class="hljs-comment">// .anyMatch(e -&gt; e &gt; 5); // anyMatch: 元素是否任意有一个满足条件</span><br>.noneMatch(e -&gt; e &lt; <span class="hljs-number">0</span>); <span class="hljs-comment">// noneMatch: 元素是否全部不满足条件</span><br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<br>&#125;<br></code></pre></td></tr></table></figure><p>find</p><p>如果需要找到某些数据，可以使用 find 相关方法。方法签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFind</span><span class="hljs-params">()</span> &#123;<br>Optional&lt;Integer&gt; first = Stream.of(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>).findFirst();<br>System.out.println(<span class="hljs-string">&quot;first = &quot;</span> + first.get());<br>Optional&lt;Integer&gt; any = Stream.of(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>).findAny();<br>System.out.println(<span class="hljs-string">&quot;any = &quot;</span> + any.get());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="max-or-min"><a href="#max-or-min" class="headerlink" title="max or min"></a>max or min</h4><img src="/2022/03/04/Java%E5%9F%BA%E7%A1%80/Stream/image-20220304155554435.png" class><p>如果需要获取最大和最小值，可以使用 max 和 min 方法。方法签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;T&gt; <span class="hljs-title function_">max</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; comparator)</span>;<br>Optional&lt;T&gt; <span class="hljs-title function_">min</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; comparator)</span>;<br></code></pre></td></tr></table></figure><p>基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMax_Min</span><span class="hljs-params">()</span> &#123;<br>Optional&lt;Integer&gt; max = Stream.of(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>).max((o1, o2) -&gt; o1 - o2);<br>System.out.println(<span class="hljs-string">&quot;first = &quot;</span> + max.get());<br>Optional&lt;Integer&gt; min = Stream.of(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>).min((o1, o2) -&gt; o1 - o2);<br>System.out.println(<span class="hljs-string">&quot;any = &quot;</span> + min.get());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testReduce</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">reduce</span> <span class="hljs-operator">=</span> Stream.of(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>)<br>            .reduce(<span class="hljs-number">0</span>, (a, b) -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a + <span class="hljs-string">&quot;, b = &quot;</span> + b);<br>                <span class="hljs-keyword">return</span> a + b;<br>            &#125;);<br>    System.out.println(reduce);<br>&#125;<br><span class="hljs-comment">// reduce:</span><br><span class="hljs-comment">// 第一次将默认做赋值给x, 取出第一个元素赋值给y,进行操作</span><br><span class="hljs-comment">// 第二次,将第一次的结果赋值给x, 取出二个元素赋值给y,进行操作</span><br><span class="hljs-comment">// 第三次,将第二次的结果赋值给x, 取出三个元素赋值给y,进行操作</span><br><span class="hljs-comment">// 第四次,将第三次的结果赋值给x, 取出四个元素赋值给y,进行操作</span><br><span class="hljs-type">int</span> <span class="hljs-variable">reduce2</span> <span class="hljs-operator">=</span> Stream.of(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>)<br>.reduce(<span class="hljs-number">0</span>, (x, y) -&gt; &#123;<br><span class="hljs-keyword">return</span> Integer.sum(x, y);<br>&#125;);<br><span class="hljs-type">int</span> <span class="hljs-variable">reduce3</span> <span class="hljs-operator">=</span> Stream.of(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>).reduce(<span class="hljs-number">0</span>, Integer::sum);<br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Stream.of(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>)<br>.reduce(<span class="hljs-number">0</span>, (x, y) -&gt; &#123;<br><span class="hljs-keyword">return</span> x &gt; y ? x : y;<br>&#125;);<br>System.out.println(<span class="hljs-string">&quot;max = &quot;</span> + max);<br></code></pre></td></tr></table></figure><p>输出如下：</p><img src="/2022/03/04/Java%E5%9F%BA%E7%A1%80/Stream/image-20220304160309736.png" class><p>由此可见求出了总和</p><h4 id="map和reduce组合使用"><a href="#map和reduce组合使用" class="headerlink" title="map和reduce组合使用"></a>map和reduce组合使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMapReduce</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 求出所有年龄的总和</span><br><span class="hljs-type">int</span> <span class="hljs-variable">totalAge</span> <span class="hljs-operator">=</span> Stream.of(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;刘德华&quot;</span>, <span class="hljs-number">58</span>),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张学友&quot;</span>, <span class="hljs-number">56</span>),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;郭富城&quot;</span>, <span class="hljs-number">54</span>),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;黎明&quot;</span>, <span class="hljs-number">52</span>))<br>.map((p) -&gt; p.getAge())<br>.reduce(<span class="hljs-number">0</span>, (x, y) -&gt; x + y);<br>System.out.println(<span class="hljs-string">&quot;totalAge = &quot;</span> + totalAge);<br><span class="hljs-comment">// 找出最大年龄</span><br><span class="hljs-type">int</span> <span class="hljs-variable">maxAge</span> <span class="hljs-operator">=</span> Stream.of(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;刘德华&quot;</span>, <span class="hljs-number">58</span>),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张学友&quot;</span>, <span class="hljs-number">56</span>),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;郭富城&quot;</span>, <span class="hljs-number">54</span>),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;黎明&quot;</span>, <span class="hljs-number">52</span>))<br>.map((p) -&gt; p.getAge())<br>.reduce(<span class="hljs-number">0</span>, (x, y) -&gt; x &gt; y ? x : y);<br>System.out.println(<span class="hljs-string">&quot;maxAge = &quot;</span> + maxAge);<br><span class="hljs-comment">// 统计 数字2 出现的次数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)<br>.map(i -&gt; &#123;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;)<br>.reduce(<span class="hljs-number">0</span>, Integer::sum);<br>System.out.println(<span class="hljs-string">&quot;count = &quot;</span> + count);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>如果有两个流，希望合并成为一个流，那么可以使用 Stream 接口的静态方法 concat ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testContact</span><span class="hljs-params">()</span> &#123;<br>Stream&lt;String&gt; streamA = Stream.of(<span class="hljs-string">&quot;张三&quot;</span>);<br>Stream&lt;String&gt; streamB = Stream.of(<span class="hljs-string">&quot;李四&quot;</span>);<br>Stream&lt;String&gt; result = Stream.concat(streamA, streamB);<br>result.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Stream流中的结果到集合中"><a href="#Stream流中的结果到集合中" class="headerlink" title="Stream流中的结果到集合中"></a>Stream流中的结果到集合中</h3><p>Stream流提供 collect 方法，其参数需要一个 java.util.stream.Collector 接口对象来指定收集到哪 种集合中。java.util.stream.Collectors 类提供一些方法，可以作为 Collector&#96;接口的实例：</p><p>public static  Collector&gt; toList() ：转换为 List 集合。</p><p>public static  Collector&gt; toSet() ：转换为 Set 集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将流中数据收集到集合中</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStreamToCollection</span><span class="hljs-params">()</span> &#123;<br>Stream&lt;String&gt; stream = Stream.of(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>);<br><span class="hljs-comment">// List&lt;String&gt; list = stream.collect(Collectors.toList());</span><br><span class="hljs-comment">// Set&lt;String&gt; set = stream.collect(Collectors.toSet());</span><br>ArrayList&lt;String&gt; arrayList = stream.collect(Collectors.toCollection(ArrayList::<span class="hljs-keyword">new</span>));<br>HashSet&lt;String&gt; hashSet = stream.collect(Collectors.toCollection(HashSet::<span class="hljs-keyword">new</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Stream流中的结果到数组中"><a href="#Stream流中的结果到数组中" class="headerlink" title="Stream流中的结果到数组中"></a>Stream流中的结果到数组中</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStreamToArray</span><span class="hljs-params">()</span> &#123;<br>Stream&lt;String&gt; stream = Stream.of(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>);<br><span class="hljs-comment">// Object[] objects = stream.toArray();</span><br><span class="hljs-comment">// for (Object obj : objects) &#123;</span><br><span class="hljs-comment">// System.out.println();</span><br><span class="hljs-comment">// &#125;</span><br>String[] strings = stream.toArray(String[]::<span class="hljs-keyword">new</span>);<br><span class="hljs-keyword">for</span> (String str : strings) &#123;<br>System.out.println(str);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对流中数据进行聚合计算"><a href="#对流中数据进行聚合计算" class="headerlink" title="对流中数据进行聚合计算"></a>对流中数据进行聚合计算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStreamToOther</span><span class="hljs-params">()</span> &#123;<br>Stream&lt;Student&gt; studentStream = Stream.of(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵丽颖&quot;</span>, <span class="hljs-number">58</span>, <span class="hljs-number">95</span>),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;杨颖&quot;</span>, <span class="hljs-number">56</span>, <span class="hljs-number">88</span>),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;迪丽热巴&quot;</span>, <span class="hljs-number">56</span>, <span class="hljs-number">99</span>),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;柳岩&quot;</span>, <span class="hljs-number">52</span>, <span class="hljs-number">77</span>));<br><span class="hljs-comment">// 获取最大值</span><br><span class="hljs-comment">// Optional&lt;Student&gt; collect = studentStream.collect(Collectors.maxBy((o1, o2) -&gt;</span><br>o1.getSocre() - o2.getSocre()));<br><span class="hljs-comment">// 获取最小值</span><br><span class="hljs-comment">// Optional&lt;Student&gt; collect = studentStream.collect(Collectors.minBy((o1, o2) -&gt;</span><br>o1.getSocre() - o2.getSocre()));<br><span class="hljs-comment">// System.out.println(collect.get());</span><br><span class="hljs-comment">// 求总和</span><br><span class="hljs-comment">// int sumAge = studentStream.collect(Collectors.summingInt(s -&gt; s.getAge()));</span><br><span class="hljs-comment">// System.out.println(&quot;sumAge = &quot; + sumAge);</span><br><span class="hljs-comment">// 平均值</span><br><span class="hljs-comment">// double avgScore = studentStream.collect(Collectors.averagingInt(s -&gt; s.getSocre()));</span><br><span class="hljs-comment">// System.out.println(&quot;avgScore = &quot; + avgScore);</span><br><span class="hljs-comment">// 统计数量</span><br><span class="hljs-comment">// Long count = studentStream.collect(Collectors.counting());</span><br><span class="hljs-comment">// System.out.println(&quot;count = &quot; + count);</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java8新特性&quot;&gt;&lt;a href=&quot;#Java8新特性&quot; class=&quot;headerlink&quot; title=&quot;Java8新特性&quot;&gt;&lt;/a&gt;Java8新特性&lt;/h1&gt;&lt;p&gt;速度更快&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lanbda表达式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="Java基础" scheme="http://example.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java基础" scheme="http://example.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>IDEA快捷键</title>
    <link href="http://example.com/2022/03/04/utils/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://example.com/2022/03/04/utils/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2022-03-04T05:23:55.000Z</published>
    <updated>2022-03-04T08:27:33.888Z</updated>
    
    <content type="html"><![CDATA[<p>Ctrl + D 复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备<br>Ctrl + P 方法参数提示显示 （必备<br>Ctrl + J 插入自定义动态代码模板 （必备<br>Ctrl + P 方法参数提示显示 （必备<br>Ctrl + O 选择可重写的方法<br>Ctrl + I 选择可继承的方法<br>Ctrl + Delete 删除光标后面的单词或是中文句 （必备）<br>Ctrl +BackSpace 删除光标前面的单词或是中文句 （必备<br>Ctrl + 左方向键 光标跳转到当前单词 &#x2F; 中文句的左侧开头位置 （必备）<br>Ctrl + 右方向键 光标跳转到当前单词 &#x2F; 中文句的右侧开头位置 （必备）<br>Ctrl + 前方向键 等效于鼠标滚轮向前效果 （必备）<br>Ctrl + 后方向键 等效于鼠标滚轮向后效果 （必备）</p><p>Alt + Insert 代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等 （必备）！！！！！！！！！<br>Ctrl + Alt + V 快速引进变量<br>Ctrl + Alt + L 格式化代码，可以对当前文件和整个包目录使用 （必备<br>Ctrl + Shift + &#x2F; 代码块注释 （必备<br>Alt + Enter 导入方法<br>Ctrl + Alt +T环绕对象 可选择 try if while等<br>Alt + 7 项目结构图</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Ctrl + D 复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备&lt;br&gt;Ctrl + P 方法参数提示显示 （必备&lt;br&gt;Ctrl + J 插入自定义动态代码模板 （必备&lt;br&gt;Ctrl + P 方法参数提示显示 （必备&lt;br&gt;Ctrl + O 选择</summary>
      
    
    
    
    <category term="utils" scheme="http://example.com/categories/utils/"/>
    
    
    <category term="utils" scheme="http://example.com/tags/utils/"/>
    
  </entry>
  
  <entry>
    <title>java:错误:不支持发行版5</title>
    <link href="http://example.com/2022/03/04/error/java-%E9%94%99%E8%AF%AF-%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8F%91%E8%A1%8C%E7%89%885/"/>
    <id>http://example.com/2022/03/04/error/java-%E9%94%99%E8%AF%AF-%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8F%91%E8%A1%8C%E7%89%885/</id>
    <published>2022-03-04T03:13:42.000Z</published>
    <updated>2022-03-04T03:16:31.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-错误-不支持发行版本-5"><a href="#java-错误-不支持发行版本-5" class="headerlink" title="java: 错误: 不支持发行版本 5"></a>java: 错误: 不支持发行版本 5</h1><p>在Intellij idea中新建了一个Maven项目，运行时报错如下：Error : java 不支持发行版本5</p><img src="/2022/03/04/error/java-%E9%94%99%E8%AF%AF-%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8F%91%E8%A1%8C%E7%89%885/image-20220304104221601.png" class><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>文件-&gt;项目结构</li></ol><img src="/2022/03/04/error/java-%E9%94%99%E8%AF%AF-%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8F%91%E8%A1%8C%E7%89%885/image-20220304104433592.png" class><p>查看两个JDK版本是否一致</p><ol start="2"><li>设置-&gt;构建、执行、部署-&gt;Java编译器</li></ol><img src="/2022/03/04/error/java-%E9%94%99%E8%AF%AF-%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8F%91%E8%A1%8C%E7%89%885/image-20220304105352604.png" class><p>修改这里的目标字节码为当前JDK版本</p><p>在pom.xml添加以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>至此，所有设置已经完成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java-错误-不支持发行版本-5&quot;&gt;&lt;a href=&quot;#java-错误-不支持发行版本-5&quot; class=&quot;headerlink&quot; title=&quot;java: 错误: 不支持发行版本 5&quot;&gt;&lt;/a&gt;java: 错误: 不支持发行版本 5&lt;/h1&gt;&lt;p&gt;在Intel</summary>
      
    
    
    
    <category term="Error" scheme="http://example.com/categories/Error/"/>
    
    
    <category term="Error" scheme="http://example.com/tags/Error/"/>
    
  </entry>
  
  <entry>
    <title>关于迷茫的未来的一点思考（一）</title>
    <link href="http://example.com/2022/02/28/%E9%97%B2%E8%B0%88/%E5%85%B3%E4%BA%8E%E8%BF%B7%E8%8C%AB%E7%9A%84%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2022/02/28/%E9%97%B2%E8%B0%88/%E5%85%B3%E4%BA%8E%E8%BF%B7%E8%8C%AB%E7%9A%84%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-02-28T15:32:27.000Z</published>
    <updated>2022-02-28T15:51:40.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于迷茫的未来的一点思考（一）"><a href="#关于迷茫的未来的一点思考（一）" class="headerlink" title="关于迷茫的未来的一点思考（一）"></a>关于迷茫的未来的一点思考（一）</h1><p>今天是2022年2月28日，过了今天就是三月份了，今天我考完了计算机网络，明天还有一门考试，后天还有两门，最近一直在考试，今天本来写我对JVM垃圾回收的思考，但因为内容很多，我只写了一部分，估计三天以后才能出来…还请大家耐心等待（可能并不会有几个人看）。</p><p>我最近很烦，大家好像现在都有自己想做的事情，要么考研，要么找工作，而我选择了后者，对此我没有什么好后悔的，因为这是我自己的选择。</p><p>今天考完计网以后我比较轻松，打开B站就发现我关注的一位程序员UP发布了一条动态，是关于支付宝2023实习启动的，我没想到会这么快，大厂的实习生招聘会这么快。现在字节跳动、阿里巴巴等大厂的实习生招聘都已经开始了，而到现在还没有准备好。</p><p>最近四六级成绩出来了，我又没有过，而进大厂四六级似乎是必要的一环，我面试的一个小公司HR也叫我去实习，但我因为考试不得不推迟两天再去，我不知道我现在是应该去小厂实习还是继续刷题、刷面经来准备大厂的暑期面试。我好烦，我不知道我上大学是为了什么，我对于未来充满了迷茫，我喜欢写代码，但是代码是否能能带给我一个光明的未来呢？我自幼就忍受了贫贱，所以我不能让我的家人或者我喜欢的人在未来也忍受贫贱。</p><p>我很烦，是对未来的焦虑。。。</p><p>应该怎么打破这种焦虑呢？我在一步一步走！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于迷茫的未来的一点思考（一）&quot;&gt;&lt;a href=&quot;#关于迷茫的未来的一点思考（一）&quot; class=&quot;headerlink&quot; title=&quot;关于迷茫的未来的一点思考（一）&quot;&gt;&lt;/a&gt;关于迷茫的未来的一点思考（一）&lt;/h1&gt;&lt;p&gt;今天是2022年2月28日，过了今天</summary>
      
    
    
    
    <category term="闲谈" scheme="http://example.com/categories/%E9%97%B2%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>JVM垃圾回收</title>
    <link href="http://example.com/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://example.com/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</id>
    <published>2022-02-28T14:55:23.000Z</published>
    <updated>2022-03-05T08:49:47.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVN垃圾回收"><a href="#JVN垃圾回收" class="headerlink" title="JVN垃圾回收"></a>JVN垃圾回收</h1><p>JVM主要分为三大部分内容：内存模型，垃圾回收和类加载</p><p>今天讲解的垃圾回收主要分为两大部分，分别是：垃圾回收算法和垃圾回收器。其中也包括一些垃圾回收基础知识，比如minor gc 和 full gc的区别等等</p><h2 id="判断垃圾是否可以回收"><a href="#判断垃圾是否可以回收" class="headerlink" title="判断垃圾是否可以回收"></a>判断垃圾是否可以回收</h2><p>现在市面上的垃圾判断算法主要有两种，一种是引用计数法，这是python正在用的。一种是可达性分析法，这是Java正在用的，下面我们进行详细讲解。</p><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>当有一个对象被引用时它的计数器就+1，但是这样可能会造成一个弊端，那就是当两个对象相互引用的时候，它们都不能被释放。</p><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220228231717227.png" class><h3 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h3><p>这是Java正在使用的算法</p><ul><li>扫描堆中的对象，看能否沿着GC Root对象为起点的引用链找到该对象，如果<strong>找不到，则表示可以回收</strong></li></ul><h2 id="GC-Root都有哪些"><a href="#GC-Root都有哪些" class="headerlink" title="GC Root都有哪些"></a>GC Root都有哪些</h2><p>可以作为GC Root的对象</p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象。</li></ul><p>　</p><p>如下代码所示，a 是栈帧中的本地变量，当 a &#x3D; null 时，由于此时 a 充当了 <strong>GC Root</strong> 的作用，a 与原来指向的实例 <strong>new Test()</strong> 断开了连接，所以对象会被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs java">publicclass Test &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Test</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>a = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>方法区中类静态属性引用的对象</li></ul><p>如下代码所示，当栈帧中的本地变量 a &#x3D; null 时，由于 a 原来指向的对象与 GC Root (变量 a) 断开了连接，所以 a 原来指向的对象会被回收，而由于我们给 s 赋值了变量的引用，<strong>s 在此时是类静态属性引用</strong>，充当了 GC Root 的作用，它指向的对象依然存活!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Test s;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Test</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>a.s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>a = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>方法区中常量引用的对象</li></ul><p>如下代码所示，常量 s 指向的对象并不会因为 a 指向的对象被回收而回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Test</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Test</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>    a = <span class="hljs-literal">null</span>;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>本地方法栈中JNI（即一般说的Native方法）引用的对象</li></ul><p>这是简单给不清楚本地方法为何物的童鞋简单解释一下：所谓本地方法就是一个 java 调用非 java 代码的接口，该方法并非 Java 实现的，可能由 C 或 Python等其他语言实现的， Java 通过 JNI 来调用本地方法， 而本地方法是以库文件的形式存放的（在 WINDOWS 平台上是 DLL 文件形式，在 UNIX 机器上是 SO 文件形式）。</p><p>当调用 Java 方法时，虚拟机会创建一个栈桢并压入 Java 栈，而当它调用的是本地方法时，虚拟机会保持 Java 栈不变，不会在 Java 栈祯中压入新的祯，虚拟机只是简单地动态连接并直接调用指定的本地方法。</p><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220305164427347.png" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">NIEXPORT <span class="hljs-keyword">void</span> JNICALL <span class="hljs-title function_">Java_com_pecuyu_jnirefdemo_MainActivity_newStringNative</span><span class="hljs-params">(JNIEnv *env, jobject instance，jstring jmsg)</span> &#123;<br>...<br>   <span class="hljs-comment">// 缓存String的class</span><br>   <span class="hljs-type">jclass</span> <span class="hljs-variable">jc</span> <span class="hljs-operator">=</span> (*env)-&gt;FindClass(env, STRING_PATH);<br>&#125;<br></code></pre></td></tr></table></figure><p>如上代码所示，当 java 调用以上本地方法时，jc 会被本地方法栈压入栈中, jc 就是我们说的本地方法栈中 JNI 的对象引用，因此只会在此本地方法执行完成后才会被释放。</p><h2 id="五种引用类型"><a href="#五种引用类型" class="headerlink" title="五种引用类型"></a>五种引用类型</h2><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220228231943521.png" class><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>一般来说我们new的对象都属于强引用</p><p>只有GC Root<strong>都不引用</strong>该对象时，才会回收<strong>强引用</strong>对象</p><ul><li>如上图B、C对象都不引用A1对象时，A1对象才会被回收</li></ul><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>当GC Root指向软引用对象时，在<strong>内存不足时</strong>，会<strong>回收软引用所引用的对象</strong></p><ul><li>如上图如果B对象不再引用A2对象且内存不足时，软引用所引用的A2对象就会被回收</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">_4M</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;<br><span class="hljs-comment">//使用软引用对象 list和SoftReference是强引用，而SoftReference和byte数组则是软引用</span><br>List&lt;SoftReference&lt;<span class="hljs-type">byte</span>[]&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>SoftReference&lt;<span class="hljs-type">byte</span>[]&gt; ref= <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[_4M]);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果在垃圾回收时发现内存不足，在回收软引用所指向的对象时，<strong>软引用本身不会被清理</strong></p><p>如果想要<strong>清理软引用</strong>，需要使<strong>用引用队列</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">_4M</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;<br><span class="hljs-comment">//使用引用队列，用于移除引用为空的软引用对象</span><br>ReferenceQueue&lt;<span class="hljs-type">byte</span>[]&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>&lt;&gt;();<br><span class="hljs-comment">//使用软引用对象 list和SoftReference是强引用，而SoftReference和byte数组则是软引用</span><br>List&lt;SoftReference&lt;<span class="hljs-type">byte</span>[]&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>SoftReference&lt;<span class="hljs-type">byte</span>[]&gt; ref= <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[_4M]);<br><br><span class="hljs-comment">//遍历引用队列，如果有元素，则移除</span><br>Reference&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">byte</span>[]&gt; poll = queue.poll();<br><span class="hljs-keyword">while</span>(poll != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">//引用队列不为空，则从集合中移除该元素</span><br>list.remove(poll);<br><span class="hljs-comment">//移动到引用队列中的下一个元素</span><br>poll = queue.poll();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>大概思路为：</strong>查看引用队列中有无软引用，如果有，则将该软引用从存放它的集合中移除（这里为一个list集合）</p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>只有弱引用引用该对象时，在垃圾回收时，<strong>无论内存是否充足</strong>，都会回收弱引用所引用的对象</p><ul><li>如上图如果B对象不再引用A3对象，则A3对象会被回收</li></ul><p><strong>弱引用的使用和软引用类似</strong>，只是将 <strong>SoftReference 换为了 WeakReference</strong></p><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>当虚引用对象所引用的对象被回收以后，虚引用对象就会被放入引用队列中，调用虚引用的方法</p><ul><li>虚引用的一个体现是<strong>释放直接内存所分配的内存</strong>，当引用的对象ByteBuffer被垃圾回收以后，虚引用对象Cleaner就会被放入引用队列中，然后调用Cleaner的clean方法来释放直接内存</li><li>如上图，B对象不再引用ByteBuffer对象，ByteBuffer就会被回收。但是直接内存中的内存还未被回收。这时需要将虚引用对象Cleaner放入引用队列中，然后调用它的clean方法来释放直接内存</li></ul><h3 id="终结器引用"><a href="#终结器引用" class="headerlink" title="终结器引用"></a>终结器引用</h3><p>所有的类都继承自Object类，Object类有一个finalize方法。当某个对象不再被其他的对象所引用时，会先将终结器引用对象放入引用队列中，然后根据终结器引用对象找到它所引用的对象，然后调用该对象的finalize方法。调用以后，该对象就可以被垃圾回收了</p><ul><li>如上图，B对象不再引用A4对象。这是终结器对象就会被放入引用队列中，引用队列会根据它，找到它所引用的对象。然后调用被引用对象的finalize方法。调用以后，该对象就可以被垃圾回收了</li></ul><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><p>jvm有四种垃圾回收算法、我们将从效率和空间等方面来对比各个算法。</p><h3 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h3><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220228232550197.png" class><p>这个算法极为简单，总体分为两步</p><p>第一步：利用可达性去遍历内存，把垃圾对象进行标记；</p><p>第二步：再遍历一遍，把垃圾进行回收</p><p>特点：效率差，实现简单，但是会剩下很多碎片空间，可能会导致程序之后运行的时候有空间但没有连续的大空间而不得已进行GC。</p><h3 id="标记整理法"><a href="#标记整理法" class="headerlink" title="标记整理法"></a>标记整理法</h3><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220228232734889.png" class><p>标记-整理 会将不被GC Root引用的对象回收，清楚其占用的内存空间。然后整理剩余的对象，可以有效避免因内存碎片而导致的问题，但是因为整体需要消耗一定的时间，所以效率较低</p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220228232826488.png" class><p>将内存分为等大小的两个区域，FROM和TO（TO中为空）。先将被GC Root引用的对象从FROM放入TO中，再回收不被GC Root引用的对象。然后交换FROM和TO。这样也可以避免内存碎片的问题，但是会占用双倍的内存空间。</p><h2 id="分带回收"><a href="#分带回收" class="headerlink" title="分带回收"></a>分带回收</h2><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220228232952024.png" class><p>此时Java内存会分为新生代和老年代，新创建的对象都被放在了新生代的伊甸园中。</p><p>当伊甸园中的内存不足时，就会进行一次垃圾回收，这时的回收叫做 <strong>Minor GC</strong></p><p>Minor GC 会将<strong>伊甸园和幸存区FROM</strong>存活的对象<strong>先</strong>复制到 <strong>幸存区 TO</strong>中， 并让其<strong>寿命加1</strong>，再<strong>交换两个幸存区</strong></p><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220301234501199.png" class><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220301234516415.png" class><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220301234526373.png" class><p>如果幸存区中的对象的<strong>寿命超过某个阈值</strong>（最大为15，4bit），就会被<strong>放入老年代</strong>中</p><p>如果新生代老年代中的内存都满了，就会先触发Minor GC，再触发<strong>Full GC</strong>，扫描<strong>新生代和老年代中</strong>所有不再使用的对象并回收</p><h2 id="吞吐量优先"><a href="#吞吐量优先" class="headerlink" title="吞吐量优先"></a>吞吐量优先</h2><p>吞吐量：即CPU用于<strong>运行用户代码的时间</strong>与CPU<strong>总消耗时间</strong>的比值（吞吐量 &#x3D; 运行用户代码时间 &#x2F; ( 运行用户代码时间 + 垃圾收集时间 )），也就是。例如：虚拟机共运行100分钟，垃圾收集器花掉1分钟，那么吞吐量就是99%</p><ul><li>多线程</li><li>堆内存较大，多核CPU</li><li>单位时间内，STW（stop the world，停掉其他所有工作线程）时间最短</li></ul><h2 id="响应时间优先"><a href="#响应时间优先" class="headerlink" title="响应时间优先"></a>响应时间优先</h2><ul><li>多线程</li><li>堆内存较大，多核CPU</li><li>尽可能让单次STW时间变短（尽量不影响其他线程运行）</li></ul><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="*垃圾回收器"></a>*垃圾回收器</h2><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>CMS追求高吞吐量，基于<strong>标记-清除算法</strong>实现。并发收集、低停顿，但是会产生内存碎片</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ol><li>初始标记，主要是标记GC Root的下级对象，会STW，但是和GC Root相关联的对象不多，所以时间很短。</li><li>并发标记，根据上一步的结果，继续向下标识所有关联的对象被，直到尽头，这个过程是多线程的，没有STW。</li><li>重新标记，就是再标记一次，因为上一步可能有的线程在运行过程中会再产生垃圾。</li><li>并发清除，清除认为死亡的对象</li></ol><h4 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h4><ol><li><strong>并发回收导致CPU资源紧张</strong>，它不会导致用户线程停顿，但是会因为占用了一部分线程而导致应用程序变慢，降低吞吐量。</li><li><strong>无法清理浮动垃圾</strong>，在并发标记和清除阶段，用户程序还在继续运行，还会伴随有新的垃圾产生，这一部分垃圾出现在标记过程结束以后，CMS无法清除它们，只能留到下一次垃圾回收的时候进行清理。</li><li><strong>并发失败</strong>，由于回收阶段程序还在并发执行，所以要留足够的内存给用户使用，因此CMS不能像其他垃圾回收器一样等老年代满了的时候再进行垃圾回收，默认情况下92%时就会进行垃圾回收。</li></ol><p>这里有一个风险，就是当CMS运行期间预留内存无法满足程序分配新需要的时候，就会出现“并发失败”的情况。这时候就会STW，时间非常漫长</p><ol start="4"><li><strong>内存碎片</strong>，CMS基于标记清除法进行垃圾回收，因此当大对象过多的时候会带来很多麻烦，即使内存很多，但是却没有一块大的内存，不得不进行Full GC.</li></ol><h3 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h3><p>G1是一款非常厉害的垃圾回收器，JDK 9以后默认使用，而且替代了CMS 收集器</p><p><strong>适用场景</strong></p><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220305160230556.png" class><ul><li>同时注重吞吐量和低延迟（响应时间）</li><li>超大堆内存（内存大的），会将堆内存划分为多个<strong>大小相等</strong>的区域</li><li>整体上是<strong>标记-整理</strong>算法，两个区域之间是<strong>复制</strong>算法</li></ul><p><strong>G1垃圾回收阶段</strong></p><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220305160324463.png" class><p>新生代伊甸园垃圾回收—–&gt;内存不足，新生代回收+并发标记—–&gt;回收新生代伊甸园、幸存区、老年代内存——&gt;新生代伊甸园垃圾回收(重新开始)</p><h4 id="分区算法region"><a href="#分区算法region" class="headerlink" title="分区算法region"></a><strong>分区算法region</strong></h4><p>分代是按对象的生命周期划分，分区则是将堆空间划分连续几个不同小区间，每一个小区间独立回收，可以控制一次回收多少个小区间，方便控制 GC 产生的停顿时间</p><p>E：伊甸园 S：幸存区 O：老年代</p><h5 id="Young-Collection"><a href="#Young-Collection" class="headerlink" title="Young Collection"></a>Young Collection</h5><ul><li>会STW</li></ul><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220305160826717.png" class><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220305160524775.png" class><h5 id="Young-Collection-CM（并发标记）"><a href="#Young-Collection-CM（并发标记）" class="headerlink" title="Young Collection + CM（并发标记）"></a>Young Collection + CM（并发标记）</h5><ul><li>在 Young GC 时会<strong>对 GC Root 进行初始标记</strong></li><li>在老年代<strong>占用堆内存的比例</strong>达到阈值时，对进行并发标记（不会STW），阈值可以根据用户来进行设定</li></ul><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220305160937129.png" class><h5 id="Mixed-Collection"><a href="#Mixed-Collection" class="headerlink" title="Mixed Collection"></a>Mixed Collection</h5><p>会对E S O 进行<strong>全面的回收</strong></p><ul><li>最终标记</li><li><strong>拷贝</strong>存活</li></ul><p><strong>问</strong>：为什么有的老年代被拷贝了，有的没拷贝？</p><p>因为指定了最大停顿时间，如果对所有老年代都进行回收，耗时可能过高。为了保证时间不超过设定的停顿时间，会<strong>回收最有价值的老年代</strong>（回收后，能够得到更多内存）</p><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220305161211242.png" class><h4 id="Young-Collection-跨代引用"><a href="#Young-Collection-跨代引用" class="headerlink" title="Young Collection 跨代引用"></a>Young Collection 跨代引用</h4><ul><li>新生代回收的跨代引用（老年代引用新生代）问题</li></ul><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220305161345437.png" class><ul><li>卡表与Remembered Set<ul><li>Remembered Set 存在于E中，用于保存新生代对象对应的脏卡<ul><li>脏卡：O被划分为多个区域（一个区域512K），如果该区域引用了新生代对象，则该区域被称为脏卡</li></ul></li></ul></li><li>在引用变更时通过post-write barried + dirty card queue</li><li>concurrent refinement threads 更新 Remembered Set</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>G1垃圾回收分为四个过程</p><ol><li>初始标记（会STW）：仅仅标记GC能直接关联到的对象，让下一阶段用户线程并发执行的时候，能正确的再可用Region这分配新的对象，这个过程时间非常短</li><li>并发标记：从GC Root进行可达性分析，找到要回收的对象，这个阶段耗时较长，但是会和用户程序并发执行，在对象图扫描完成以后，要重新处理在并发过程中有变动的引用对象</li><li>最终标记（会STW）：对用户线程做短暂暂停，处理并发阶段结束后仍然有引用变动的对象。</li><li>清理阶段（会STW） ：更新Regin的统计数据，对各个Region的回收价值进行成本排序，根据用户所期望的停顿时间来指定回收计划，可以自由选择任意多Region构成回收集，把决定回收的region复制到新的region，再清除掉原来的整个Region</li></ol><h3 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h3><p>重新标记阶段</p><p>在垃圾回收时，收集器处理对象的过程中</p><p>黑色：已被处理，需要保留的 灰色：正在处理中的 白色：还未处理的</p><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220305161439176.png" class><p>但是在<strong>并发标记过程中</strong>，有可能A被处理了以后未引用C，但该处理过程还未结束，在<strong>处理过程结束之前</strong>A引用了C，这时就会用到remark</p><p>过程如下</p><ul><li>之前C未被引用，这时A引用了C，就会给C加一个写屏障，写屏障的指令会被执行，将C放入一个队列当中，并将C变为 处理中 状态</li><li>在<strong>并发标记</strong>阶段结束以后，重新标记阶段会STW，然后将放在该队列中的对象重新处理，发现有强引用引用它，就会处理它</li></ul><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220305161626021.png" class><h3 id="空间分配担保原则"><a href="#空间分配担保原则" class="headerlink" title="空间分配担保原则"></a>空间分配担保原则</h3><img src="/2022/02/28/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20220305163001997.png" class><p>至此我了解到的有关JVM内容皆如上，欢迎大家评论</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JVN垃圾回收&quot;&gt;&lt;a href=&quot;#JVN垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;JVN垃圾回收&quot;&gt;&lt;/a&gt;JVN垃圾回收&lt;/h1&gt;&lt;p&gt;JVM主要分为三大部分内容：内存模型，垃圾回收和类加载&lt;/p&gt;
&lt;p&gt;今天讲解的垃圾回收主要分为两大</summary>
      
    
    
    
    <category term="JVM" scheme="http://example.com/categories/JVM/"/>
    
    
    <category term="JVM" scheme="http://example.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存结构</title>
    <link href="http://example.com/2022/02/27/JVM/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2022/02/27/JVM/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</id>
    <published>2022-02-27T15:16:49.000Z</published>
    <updated>2022-03-05T09:13:07.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h1><img src="/2022/02/27/JVM/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20220227232032763.png" class><p>如上图所示，JVM分为5大区域，程序计数器、虚拟机栈、本地方法栈、堆、方法区。其中除了堆和方法区外全部线程私有。</p><ul><li>程序计数器</li></ul><p>线程私有，是一块很小的空间，是当前线程的指示器，记录下一条指令的地址。与计算机CPU内程序计数器作用类似。</p><ul><li>虚拟机栈</li></ul><p>线程私有，每个方法执行的时候就创建一个栈帧，用于存储局部变量，操作数、动态链接和方法返回等信息，当请求栈超过虚拟机允许的最大深度的时候，会有StackOverFlow</p><ul><li>本地方法栈</li></ul><p>线程私有，保存native方法信息，当一个JVM创建的线程调用native方法后，jvm不会在虚拟机中创建栈帧，而是简单的动态链接后直接调用<br>本地方法栈和虚拟机栈发挥的作用基本一样。区别是:本地方法栈执行的是Native方法服务,而虚拟机栈执行的是java方法。在HotSpot vm中本地方法栈和虚拟机栈合二为一。</p><img src="/2022/02/27/JVM/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/e9d511ea.png" class><ul><li>堆</li></ul><p>Java堆是所有线程共享的一块内存，几乎所有对象实例和数组都要在堆上分配内存，经常垃圾回收</p><ul><li>方法区</li></ul><p>存放类加载信息、常量、静态变量等等。即永久代，在JDK1.8后不存在方法区了，被元数据区所代替了，原方法区被划分成了两个部分： </p><ol><li>加载到类信息</li><li>运行时常量池</li></ol><p>加载的类信息被保存在了元数据区，运行时常量池保存在堆中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JVM内存结构&quot;&gt;&lt;a href=&quot;#JVM内存结构&quot; class=&quot;headerlink&quot; title=&quot;JVM内存结构&quot;&gt;&lt;/a&gt;JVM内存结构&lt;/h1&gt;&lt;img src=&quot;/2022/02/27/JVM/JVM%E5%86%85%E5%AD%98%E7%BB</summary>
      
    
    
    
    <category term="JVM" scheme="http://example.com/categories/JVM/"/>
    
    
    <category term="JVM" scheme="http://example.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>ConcurrentHashMap深度剖析</title>
    <link href="http://example.com/2022/02/26/Java%E9%9B%86%E5%90%88/ConcurrentHashMap%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/"/>
    <id>http://example.com/2022/02/26/Java%E9%9B%86%E5%90%88/ConcurrentHashMap%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/</id>
    <published>2022-02-26T15:15:45.000Z</published>
    <updated>2022-02-26T16:02:57.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ConcurrentHashMap深度剖析"><a href="#ConcurrentHashMap深度剖析" class="headerlink" title="ConcurrentHashMap深度剖析"></a>ConcurrentHashMap深度剖析</h1><p>我在上一次面试被问到了为甚么ConcurrentHashMap可以实现线程安全，这里我没有答出来，在这里我打算好好带大家一起了解ConcurrentHashMap顺便让我复习一下。</p><h2 id="ConcurrentHashMap为什么可以实现线程安全"><a href="#ConcurrentHashMap为什么可以实现线程安全" class="headerlink" title="ConcurrentHashMap为什么可以实现线程安全"></a>ConcurrentHashMap为什么可以实现线程安全</h2><h3 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><p><strong>数据结构</strong></p><img src="/2022/02/26/Java%E9%9B%86%E5%90%88/ConcurrentHashMap%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/image-20220226232104869.png" class><p>在1.7的时候ConcurrentHashMap由<code>segment</code>数组和<code>HashEntry</code>数组组成，ConcurrentHashMap把哈希桶分为segment小数组，每个小数组有n个HashEntry组成。segment继承RenntrantLock即可重入锁，hashEntry存储键值对。</p><p><strong>结果</strong></p><p>首先将数据分为一段一段存储，然后给每一段都配一把可重入锁，当一个线程占用锁访问其中一个段数据时，其他数据也能访问，真正能实现并发。</p><h3 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h3><p><strong>数据结构</strong></p><img src="/2022/02/26/Java%E9%9B%86%E5%90%88/ConcurrentHashMap%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/image-20220226232838666.png" class><p>1.8采用了数组 + 链表 + 红黑树结构。在锁实现上抛弃了segmnet分段式锁，而是采用<code>CAS + synchronized</code>实现更加低粒度的锁。</p><p>锁的级别控制在了hash桶元素级别，也就是说只需要锁住链表头节点，即红黑树根节点，就不会影响其他哈希桶元素读写，大大提高并发度。</p><h2 id="ConcurrentHashMap-put方法"><a href="#ConcurrentHashMap-put方法" class="headerlink" title="ConcurrentHashMap put方法"></a>ConcurrentHashMap put方法</h2><h3 id="JDK1-7-1"><a href="#JDK1-7-1" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><p>首先尝试获取锁，如果没有获取到就进行自旋，如果自旋超过64次，改为阻塞获取锁。</p><p>获取到以后：</p><ol><li>将segment中的table通过key定位到HashEntry</li><li>遍历HashEntry，如果不为空就判断传入的key与当前遍历key是否相等，相等就覆盖</li><li>不为空就新建一个HashEntry并加入到segment，同时判断是否需要扩容</li><li>释放锁</li></ol><h3 id="JDK1-8-1"><a href="#JDK1-8-1" class="headerlink" title="JDK1.8"></a>JDK1.8</h3><ol><li>根据key计算hash值</li><li>判断是否需要初始化</li><li>定位到node，拿到首节点f,</li></ol><ul><li>如果为null就使用cas进行添加</li><li>如果f.hash &#x3D;&#x3D; MOVED &#x3D;&#x3D; -1,说明其他线程正在扩容，则参与一起扩容</li><li>都不满足就用synchronized锁住f，判断是链表还是红黑树，直接插入</li></ul><p>具体可以看这里<a href="https://mp.weixin.qq.com/s?__biz=MzkyMTI3Mjc2MQ==&mid=2247485909&idx=1&sn=d9c672eebb090866a72f99f3d8032e76&source=41#wechat_redirect">面试 ConcurrentHashMap ，看这一篇就够了！ (qq.com)</a></p><h2 id="ConcurrentHashMap-get方法是否需要加锁，为什么"><a href="#ConcurrentHashMap-get方法是否需要加锁，为什么" class="headerlink" title="ConcurrentHashMap get方法是否需要加锁，为什么"></a>ConcurrentHashMap get方法是否需要加锁，为什么</h2><p>不需要，因为Node元素的val和指针next是volatile修饰的，在多线程环境下线程A修改val或增加节点对线程B可见</p><img src="/2022/02/26/Java%E9%9B%86%E5%90%88/ConcurrentHashMap%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/image-20220226234644053.png" class><h2 id="ConcurrentHashMap不支持key或者value为null的原因"><a href="#ConcurrentHashMap不支持key或者value为null的原因" class="headerlink" title="ConcurrentHashMap不支持key或者value为null的原因"></a>ConcurrentHashMap不支持key或者value为null的原因</h2><h3 id="value不能为null原因"><a href="#value不能为null原因" class="headerlink" title="value不能为null原因"></a>value不能为null原因</h3><p>因为ConcurrentHashMap用于多线程，如果map.get(key)得到null，无法判断是得到的value为null还是没有找到key为null，而单线程hashmap可以使用containsKey方法去判断。</p><p>这样当在第一次执行时没有key，第二次有key但值为null，这样就具有二义性</p><h3 id="key不能为null"><a href="#key不能为null" class="headerlink" title="key不能为null"></a>key不能为null</h3><p>首先null不好计算哈希值，然后当多个线程同时放入null会出问题，</p><h2 id="ConcurrentHashMap的并发度是什么？"><a href="#ConcurrentHashMap的并发度是什么？" class="headerlink" title="ConcurrentHashMap的并发度是什么？"></a>ConcurrentHashMap的并发度是什么？</h2><h3 id="JDK1-7-2"><a href="#JDK1-7-2" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><p>并发度默认16，可以自己设置，默认是2的n次方，如果设置17，则真实为32.</p><h2 id="ConcurrentHashMap迭代器是强一致性还是弱一致性？"><a href="#ConcurrentHashMap迭代器是强一致性还是弱一致性？" class="headerlink" title="ConcurrentHashMap迭代器是强一致性还是弱一致性？"></a>ConcurrentHashMap迭代器是强一致性还是弱一致性？</h2><p>与hashmap不同，ConcurrentHashMap迭代器是弱一致性</p><p>ConcurrentHashMap迭代器创建以后，就会按哈希表结构遍历，但是在遍历的时候，内部元素可能会发生变化，如果变化发生在已经变化的部分，迭代器不会反映出来，如果发生在未遍历的部分，迭代器就会发现并反映出来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ConcurrentHashMap深度剖析&quot;&gt;&lt;a href=&quot;#ConcurrentHashMap深度剖析&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentHashMap深度剖析&quot;&gt;&lt;/a&gt;ConcurrentHashMap深度剖析&lt;/</summary>
      
    
    
    
    <category term="Java集合" scheme="http://example.com/categories/Java%E9%9B%86%E5%90%88/"/>
    
    
    <category term="ConcurrentHashMap" scheme="http://example.com/tags/ConcurrentHashMap/"/>
    
    <category term="Java集合" scheme="http://example.com/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>HashMap深度剖析</title>
    <link href="http://example.com/2022/02/25/Java%E9%9B%86%E5%90%88/HashMap%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/"/>
    <id>http://example.com/2022/02/25/Java%E9%9B%86%E5%90%88/HashMap%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/</id>
    <published>2022-02-25T14:45:43.000Z</published>
    <updated>2022-02-25T16:32:32.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap深度剖析"><a href="#HashMap深度剖析" class="headerlink" title="HashMap深度剖析"></a>HashMap深度剖析</h1><p>最近开学了，在忙着准备考试和复习，所以有几天没有更新，今天我回来了！</p><p>今天带大家来学习一下HashMap的底层原理，顺便复习一下。</p><h2 id="Java集合继承"><a href="#Java集合继承" class="headerlink" title="Java集合继承"></a>Java集合继承</h2><p><img src="https://img.jbzj.com/file_images/article/201711/2017110209260219.gif" alt="2017110209260219.gif"></p><p>（图片来源于网络）</p><p>由上图可以看出List Set Queue三者都实现自Collection而Map则单独实现于Map.</p><p>List有序，这里是指插入顺序有序，可以插入重复内容和null。Set无序，里面内容各不相同，只能存在一个null，而HashMap是一种键值对，只能存在一个键为nulld键值对。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>HashMap 维护了一个Entry数组，数组里存储的是键值对。</p><p>在JDK1.7中，由 数组+链表 组成，链表能解决hash冲突，这里使用头插法，会导致链表死循环。</p><p>在JDK1.8中，由 数组+链表+红黑树组成。</p><h3 id="Hash默认加载因子"><a href="#Hash默认加载因子" class="headerlink" title="Hash默认加载因子"></a>Hash默认加载因子</h3><img src="/2022/02/25/Java%E9%9B%86%E5%90%88/HashMap%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/image-20220225234015202.png" class><p>通过源码可以看出是0.75，</p><p>Node table的初始化长度为16，也就是说当超过12时会进行扩容，0.75是一个权衡后的值。较高时会降低空间开销，但会增加查找成本，反之则会浪费空间。</p><p>首先使用Hash算法计算它的hashcode,计算出来以后进行取模操作.</p><h2 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h2><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上为put方法源码</p><p>可以看到它第一步是看数组是否为空，如果为空就进行初始化</p><p>然后看是否会有冲突，如果没有就直接放入</p><p>如果冲突了且key已存在就直接覆盖这个值</p><p>如果冲突后是个数那就直接挂在树上</p><p>如果是个链表那就判断链表长度是否大于8且数组小于64，如果这样就进行扩容，如果链表长度大于8且数组大于64那就转化为红黑树，否则直接链表上用尾插法挂上</p><h2 id="扩容过程"><a href="#扩容过程" class="headerlink" title="扩容过程"></a>扩容过程</h2><h3 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><p>在1.7就是使用一个容量更大的数组代替原来的数组，用transfer()方法将原有内容放在新的内容里</p><h3 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h3><p>进行了两处优化</p><h4 id="优化1"><a href="#优化1" class="headerlink" title="优化1"></a>优化1</h4><p>在计算位置的时候不用再计算hash，而是看原来的hash新增的bit是1还是0就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">do</span> &#123;<br>                            next = e.next;<br>                            <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br>                                <span class="hljs-keyword">if</span> (loTail == <span class="hljs-literal">null</span>)<br>                                    loHead = e;<br>                                <span class="hljs-keyword">else</span><br>                                    loTail.next = e;<br>                                loTail = e;<br>                            &#125;<br>                            <span class="hljs-keyword">else</span> &#123;<br>                                <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-literal">null</span>)<br>                                    hiHead = e;<br>                                <span class="hljs-keyword">else</span><br>                                    hiTail.next = e;<br>                                hiTail = e;<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-literal">null</span>);<br>                        <span class="hljs-keyword">if</span> (loTail != <span class="hljs-literal">null</span>) &#123;<br>                            loTail.next = <span class="hljs-literal">null</span>;<br>                            newTab[j] = loHead;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-literal">null</span>) &#123;<br>                            hiTail.next = <span class="hljs-literal">null</span>;<br>                            newTab[j + oldCap] = hiHead;<br>                        &#125;<br></code></pre></td></tr></table></figure><p>上面是resize方法的部分过程</p><p>hashmap长度为2的n次方，再长度变为二倍的时候，进制上就多一位，此时就是多了一个高参位参与数组下标确定。此时一个元素通过hash算法计算后恰好出现一个现象，最高位是0坐标不变，1则变为原长度+原坐标。</p><p>例如原位置为5，二进制0101，数组长度16</p><p>现在扩容为32，5和32-1进行&amp;运算后为10101，第一位变为1，所以新位置是5+16.</p><h4 id="优化2"><a href="#优化2" class="headerlink" title="优化2"></a>优化2</h4><p>采用尾插法</p><p>不会死循环</p><p>多线程put丢失，get put并发会get为null</p><h2 id="长度为2的n次方"><a href="#长度为2的n次方" class="headerlink" title="长度为2的n次方"></a>长度为2的n次方</h2><p>计算速度快</p><p>上面resize代码可以看到，计算hash值的时候进行的是&amp;操作，这个操作速度快于%</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HashMap深度剖析&quot;&gt;&lt;a href=&quot;#HashMap深度剖析&quot; class=&quot;headerlink&quot; title=&quot;HashMap深度剖析&quot;&gt;&lt;/a&gt;HashMap深度剖析&lt;/h1&gt;&lt;p&gt;最近开学了，在忙着准备考试和复习，所以有几天没有更新，今天我回来了！</summary>
      
    
    
    
    <category term="Java集合" scheme="http://example.com/categories/Java%E9%9B%86%E5%90%88/"/>
    
    
    <category term="Java集合" scheme="http://example.com/tags/Java%E9%9B%86%E5%90%88/"/>
    
    <category term="HashMap" scheme="http://example.com/tags/HashMap/"/>
    
  </entry>
  
</feed>
